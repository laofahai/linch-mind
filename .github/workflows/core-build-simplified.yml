# 🚀 简化的核心构建工作流 - 演示版本
# 目标: 将原有7个工作流合并为3个核心工作流之一

name: 🔧 Core Build Pipeline (Simplified)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

# 从统一配置读取版本信息
env:
  FLUTTER_VERSION: "3.24.3"  # 将改为从config/versions.yml读取
  PYTHON_VERSION: "3.11"     # 将改为从config/versions.yml读取

jobs:
  # 🔍 智能变更检测 - 合并了所有原有的detect-changes jobs
  detect-changes:
    name: 🔍 Smart Change Detection
    runs-on: ubuntu-latest
    outputs:
      build_flutter: ${{ steps.changes.outputs.flutter }}
      build_daemon: ${{ steps.changes.outputs.daemon }}
      build_connectors: ${{ steps.changes.outputs.connectors }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect component changes
        id: changes
        run: |
          # 统一的变更检测逻辑 - 替代了3个重复的detect jobs
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          
          # Flutter变更检测
          if echo "$CHANGED_FILES" | grep -q '^ui/'; then
            echo "flutter=true" >> $GITHUB_OUTPUT
            echo "📱 Flutter changes detected"
          else
            echo "flutter=false" >> $GITHUB_OUTPUT
          fi
          
          # Daemon变更检测  
          if echo "$CHANGED_FILES" | grep -q '^daemon/'; then
            echo "daemon=true" >> $GITHUB_OUTPUT
            echo "🔧 Daemon changes detected"
          else
            echo "daemon=false" >> $GITHUB_OUTPUT
          fi
          
          # Connectors变更检测
          if echo "$CHANGED_FILES" | grep -q '^connectors/'; then
            echo "connectors=true" >> $GITHUB_OUTPUT
            echo "🔌 Connectors changes detected"
          else
            echo "connectors=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract version info
        id: version
        run: |
          # 智能版本提取 - 支持多组件版本管理
          if [ "${{ steps.changes.outputs.flutter }}" = "true" ]; then
            VERSION=$(grep '^version:' ui/pubspec.yaml | sed 's/version: //')
          elif [ "${{ steps.changes.outputs.daemon }}" = "true" ]; then
            VERSION=$(grep '^version = ' daemon/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          else
            VERSION="dev-$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Build version: $VERSION"

  # 🏗️ 并行质量检查 - 合并了所有quality-check jobs
  quality-check:
    name: 🏗️ Parallel Quality Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build_flutter == 'true' || needs.detect-changes.outputs.build_daemon == 'true' || needs.detect-changes.outputs.build_connectors == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        component: 
          - ${{ needs.detect-changes.outputs.build_flutter == 'true' && 'flutter' || '' }}
          - ${{ needs.detect-changes.outputs.build_daemon == 'true' && 'daemon' || '' }}
          - ${{ needs.detect-changes.outputs.build_connectors == 'true' && 'connectors' || '' }}
        exclude:
          - component: ''
    
    steps:
      - uses: actions/checkout@v4
      
      # 🔧 统一环境设置 - 使用composite action模式 (待实现)
      - name: Setup environment for ${{ matrix.component }}
        run: |
          case "${{ matrix.component }}" in
            flutter)
              echo "Setting up Flutter environment..."
              # Flutter setup logic
              ;;
            daemon)
              echo "Setting up Python environment..."
              pip install --upgrade pip
              cd daemon && pip install -e .
              ;;
            connectors)
              echo "Setting up Connectors environment..."
              cd connectors && pip install -e .
              ;;
          esac
      
      # 🧪 组件特定质量检查
      - name: Run quality checks for ${{ matrix.component }}
        run: |
          case "${{ matrix.component }}" in
            flutter)
              cd ui
              flutter pub get
              flutter analyze --fatal-infos
              dart format --set-exit-if-changed .
              flutter test --coverage
              ;;
            daemon)
              cd daemon
              python -m flake8 . --max-line-length=100
              python -m black --check .
              python -m pytest tests/ --cov=.
              ;;
            connectors)
              cd connectors
              python -m flake8 . --max-line-length=100
              python -m black --check .
              python -m pytest tests/ --cov=.
              ;;
          esac

  # 📦 智能构建 - 合并了所有build jobs，使用条件构建
  smart-build:
    name: 📦 Smart Build (${{ matrix.component }})
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.build_flutter == 'true' || needs.detect-changes.outputs.build_daemon == 'true' || needs.detect-changes.outputs.build_connectors == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Flutter构建矩阵 - 简化版
          - component: flutter
            os: ubuntu-latest
            platform: linux
            condition: ${{ needs.detect-changes.outputs.build_flutter == 'true' }}
          - component: flutter  
            os: macos-latest
            platform: macos
            condition: ${{ needs.detect-changes.outputs.build_flutter == 'true' }}
          - component: flutter
            os: windows-latest
            platform: windows
            condition: ${{ needs.detect-changes.outputs.build_flutter == 'true' }}
          
          # Daemon构建矩阵
          - component: daemon
            os: ubuntu-latest
            platform: linux
            condition: ${{ needs.detect-changes.outputs.build_daemon == 'true' }}
          
          # Connectors构建矩阵 - 简化为仅Linux
          - component: connectors
            os: ubuntu-latest
            platform: linux
            condition: ${{ needs.detect-changes.outputs.build_connectors == 'true' }}
        
        exclude:
          - condition: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build ${{ matrix.component }} for ${{ matrix.platform }}
        run: |
          echo "🚀 Building ${{ matrix.component }} for ${{ matrix.platform }}"
          
          case "${{ matrix.component }}" in
            flutter)
              cd ui
              flutter build ${{ matrix.platform }} --release
              ;;
            daemon)
              cd daemon
              # Docker build for daemon
              echo "Building daemon service..."
              ;;
            connectors)
              cd connectors
              # 使用简化的连接器构建逻辑
              python scripts/build-all-connectors.py
              ;;
          esac
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-${{ matrix.platform }}
          path: |
            ui/build/
            daemon/dist/
            connectors/dist/
          retention-days: 7  # 简化保留策略

  # 📊 构建状态汇总 - 替代了多个独立的summary jobs
  build-summary:
    name: 📊 Build Status Summary  
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check, smart-build]
    if: always()
    
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "## 🚀 Linch Mind Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.detect-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Components Built**:" >> $GITHUB_STEP_SUMMARY
          
          # 智能状态检测
          if [ "${{ needs.detect-changes.outputs.build_flutter }}" = "true" ]; then
            echo "- 📱 **Flutter**: ${{ needs.smart-build.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.detect-changes.outputs.build_daemon }}" = "true" ]; then
            echo "- 🔧 **Daemon**: ${{ needs.smart-build.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.detect-changes.outputs.build_connectors }}" = "true" ]; then
            echo "- 🔌 **Connectors**: ${{ needs.smart-build.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quality Checks**: ${{ needs.quality-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          
          # 整体状态
          if [ "${{ needs.quality-check.result }}" = "success" ] && [ "${{ needs.smart-build.result }}" = "success" ]; then
            echo "🎉 **Overall Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Next Steps**: Review artifacts and consider deployment to staging" >> $GITHUB_STEP_SUMMARY