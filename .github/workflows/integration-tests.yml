name: 🔗 Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每日凌晨2点运行完整测试套件
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - ipc
        - connectors
        - ui-daemon
        - performance
      environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - development
        - staging

env:
  PYTHON_VERSION: "3.13"      # 匹配daemon实际版本
  FLUTTER_VERSION: "3.32.0"   # 匹配UI实际版本
  POETRY_VERSION: "1.8"       # 匹配项目实际版本

jobs:
  # 环境准备
  setup-test-env:
    runs-on: ubuntu-latest
    outputs:
      test_environment: ${{ steps.setup.outputs.test_environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test environment
        id: setup
        run: |
          TEST_ENV="${{ github.event.inputs.environment || 'staging' }}"
          echo "test_environment=$TEST_ENV" >> $GITHUB_OUTPUT
          echo "🔧 Test environment: $TEST_ENV"

  # IPC通信集成测试
  test-ipc-integration:
    runs-on: ${{ matrix.os }}
    needs: setup-test-env
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'ipc' || github.event.inputs.test_suite == ''
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install daemon dependencies
        run: |
          cd daemon
          poetry install --no-interaction
      
      - name: Initialize test environment
        run: |
          cd daemon
          poetry run python scripts/initialize_environment.py ${{ needs.setup-test-env.outputs.test_environment }}
      
      - name: Start daemon for testing
        run: |
          cd daemon
          poetry run python main.py &
          DAEMON_PID=$!
          echo "DAEMON_PID=$DAEMON_PID" >> $GITHUB_ENV
          # 等待daemon启动
          sleep 10
        shell: bash
      
      - name: Test IPC communication
        run: |
          cd daemon
          # 测试核心IPC集成
          poetry run pytest tests/test_ipc_integration.py -v \
            --tb=short \
            --maxfail=3 \
            -k "not slow"
      
      - name: Test cross-platform IPC
        run: |
          cd daemon  
          # 测试跨平台IPC (Unix Socket/Named Pipe)
          poetry run pytest tests/test_ipc_integration_comprehensive.py -v \
            --tb=short \
            -k "ipc"
      
      - name: Test environment isolation
        run: |
          cd daemon
          # 测试环境隔离系统
          poetry run python test_environment_isolation.py
      
      - name: Cleanup daemon
        if: always()
        run: |
          if [ ! -z "$DAEMON_PID" ]; then
            kill $DAEMON_PID || true
          fi
        shell: bash
      
      - name: Upload IPC test logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ipc-test-logs-${{ matrix.os }}
          path: |
            daemon/*.log
            daemon/logs/

  # 连接器集成测试
  test-connectors-integration:
    runs-on: ${{ matrix.os }}
    needs: setup-test-env
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'connectors' || github.event.inputs.test_suite == ''
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        connector: [clipboard, filesystem]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install build dependencies (${{ matrix.os }})
        run: |
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              sudo apt-get update
              sudo apt-get install -y build-essential cmake nlohmann-json3-dev
              ;;
            "macos-latest")
              brew install cmake nlohmann-json
              ;;
            "windows-latest")
              choco install cmake
              ;;
          esac
      
      - name: Build connectors
        run: |
          cd connectors/scripts
          ./build.sh
      
      - name: Build specific connector
        run: |
          cd connectors
          ../scripts/build-tools/build_connector.sh official/${{ matrix.connector }}
      
      - name: Set up Python for daemon
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install daemon dependencies
        run: |
          cd daemon
          poetry install --no-interaction
      
      - name: Test connector integration
        run: |
          cd daemon
          # 启动daemon
          poetry run python main.py &
          DAEMON_PID=$!
          sleep 10
          
          # 测试连接器管理
          poetry run pytest tests/test_connector_manager_effective.py -v \
            -k "test_${{ matrix.connector }}" \
            --tb=short
          
          # 清理
          kill $DAEMON_PID || true
      
      - name: Upload connector test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: connector-test-${{ matrix.connector }}-${{ matrix.os }}
          path: |
            daemon/test-results.xml
            daemon/*.log

  # UI-Daemon端到端测试
  test-ui-daemon-e2e:
    runs-on: ${{ matrix.os }}
    needs: setup-test-env
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'ui-daemon' || github.event.inputs.test_suite == ''
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]  # Windows UI测试较复杂，暂时跳过
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev \
            xvfb
      
      - name: Install daemon dependencies
        run: |
          cd daemon
          poetry install --no-interaction
      
      - name: Install UI dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Initialize test environment
        run: |
          cd daemon
          poetry run python scripts/initialize_environment.py ${{ needs.setup-test-env.outputs.test_environment }}
      
      - name: Start daemon
        run: |
          cd daemon
          poetry run python main.py &
          DAEMON_PID=$!
          echo "DAEMON_PID=$DAEMON_PID" >> $GITHUB_ENV
          sleep 15  # 给daemon更多时间启动
        shell: bash
      
      - name: Run UI integration tests
        run: |
          cd ui
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              xvfb-run -a flutter test integration_test/ --verbose
              ;;
            "macos-latest")
              flutter test integration_test/ --verbose
              ;;
          esac
      
      - name: Test UI-Daemon communication
        run: |
          cd ui
          # 测试基本IPC通信
          flutter test test/services/ipc_client_test.dart --verbose
          # 测试API适配器
          flutter test test/services/ipc_api_adapter_test.dart --verbose
      
      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$DAEMON_PID" ]; then
            kill $DAEMON_PID || true
          fi
        shell: bash
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-${{ matrix.os }}
          path: |
            ui/test_results/
            daemon/*.log

  # 性能集成测试
  test-performance:
    runs-on: ubuntu-latest
    needs: setup-test-env
    if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == ''
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          cd daemon
          poetry install --no-interaction
      
      - name: Initialize performance test environment
        run: |
          cd daemon
          poetry run python scripts/initialize_environment.py staging
      
      - name: Run architecture performance tests
        run: |
          cd daemon
          poetry run pytest tests/test_architecture_performance.py -v \
            --benchmark-only \
            --benchmark-json=benchmark-results.json \
            --benchmark-warmup=true
      
      - name: Analyze performance results
        run: |
          cd daemon
          python -c "
          import json
          import sys
          
          with open('benchmark-results.json', 'r') as f:
              results = json.load(f)
          
          # 检查关键性能指标
          benchmarks = results['benchmarks']
          
          # IPC延迟必须<10ms
          ipc_tests = [b for b in benchmarks if 'ipc' in b['name'].lower()]
          for test in ipc_tests:
              if test['stats']['mean'] > 0.01:  # 10ms
                  print(f'❌ IPC performance regression: {test[\"name\"]} took {test[\"stats\"][\"mean\"]*1000:.2f}ms')
                  sys.exit(1)
          
          # 启动时间必须<3s
          startup_tests = [b for b in benchmarks if 'startup' in b['name'].lower()]
          for test in startup_tests:
              if test['stats']['mean'] > 3.0:
                  print(f'❌ Startup performance regression: {test[\"name\"]} took {test[\"stats\"][\"mean\"]:.2f}s')
                  sys.exit(1)
          
          print('✅ All performance benchmarks passed')
          "
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmark
          path: daemon/benchmark-results.json

  # 系统健康检查
  test-system-health:
    runs-on: ubuntu-latest
    needs: [test-ipc-integration, test-connectors-integration]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Run system health check
        run: |
          python scripts/simple_health_check.py
      
      - name: Verify architecture integrity
        run: |
          python scripts/verify_architecture.py

  # 测试总结报告
  integration-test-summary:
    runs-on: ubuntu-latest
    needs: [test-ipc-integration, test-connectors-integration, test-ui-daemon-e2e, test-performance, test-system-health]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "🔗 Integration Tests Summary"
          echo "=========================="
          echo "IPC Integration: ${{ needs.test-ipc-integration.result }}"
          echo "Connectors Integration: ${{ needs.test-connectors-integration.result }}"
          echo "UI-Daemon E2E: ${{ needs.test-ui-daemon-e2e.result }}"
          echo "Performance Tests: ${{ needs.test-performance.result }}"
          echo "System Health: ${{ needs.test-system-health.result }}"
          echo ""
          
          # 检查关键测试是否通过
          if [[ "${{ needs.test-ipc-integration.result }}" == "failure" ]]; then
            echo "❌ Critical: IPC integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-performance.result }}" == "failure" ]]; then
            echo "❌ Critical: Performance tests failed"
            exit 1
          fi
          
          echo "✅ Integration test suite completed"
      
      - name: Report test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              ipc: '${{ needs.test-ipc-integration.result }}',
              connectors: '${{ needs.test-connectors-integration.result }}',
              e2e: '${{ needs.test-ui-daemon-e2e.result }}',
              performance: '${{ needs.test-performance.result }}',
              health: '${{ needs.test-system-health.result }}'
            };
            
            const failed = Object.entries(results).filter(([, result]) => result === 'failure');
            const passed = Object.entries(results).filter(([, result]) => result === 'success');
            
            const summary = `## 🔗 Integration Tests Summary
            
            **Passed**: ${passed.length}/5 test suites
            **Failed**: ${failed.length}/5 test suites
            
            ### Results
            ${Object.entries(results).map(([test, result]) => 
              `- ${test}: ${result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️'} ${result}`
            ).join('\n')}
            
            ${failed.length > 0 ? '### ⚠️ Failed Tests\n' + failed.map(([test]) => `- ${test}`).join('\n') : ''}
            `;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }