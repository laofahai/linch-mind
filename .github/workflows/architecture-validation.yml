name: 🏗️ Architecture Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周检查一次架构一致性
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  FLUTTER_VERSION: "3.32.0"

jobs:
  # 验证技术栈版本一致性
  validate-tech-stack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate Python version consistency
        run: |
          echo "🐍 Validating Python version consistency..."

          # 检查daemon/pyproject.toml中的Python版本
          DAEMON_PYTHON=$(grep 'python = ' daemon/pyproject.toml | cut -d'"' -f2)
          echo "Daemon requires Python: $DAEMON_PYTHON"

          # 检查CI/CD配置中的Python版本
          CI_PYTHON="${{ env.PYTHON_VERSION }}"
          echo "CI/CD uses Python: $CI_PYTHON"

          # 简单版本兼容性检查
          if [[ "$DAEMON_PYTHON" == *"$CI_PYTHON"* ]]; then
            echo "✅ Python versions are compatible"
          else
            echo "❌ Python version mismatch detected"
            echo "  Daemon: $DAEMON_PYTHON"
            echo "  CI/CD: $CI_PYTHON"
            exit 1
          fi

      - name: Validate Flutter version consistency
        run: |
          echo "🎯 Validating Flutter version consistency..."

          # 检查ui/pubspec.yaml中的Flutter SDK约束
          if [ -f "ui/pubspec.yaml" ]; then
            FLUTTER_CONSTRAINT=$(grep -A1 'environment:' ui/pubspec.yaml | grep 'flutter:' | cut -d':' -f2 | xargs)
            echo "UI Flutter constraint: $FLUTTER_CONSTRAINT"
          fi

          CI_FLUTTER="${{ env.FLUTTER_VERSION }}"
          echo "CI/CD uses Flutter: $CI_FLUTTER"

          echo "✅ Flutter versions validated"

      - name: Validate dependency management consistency
        run: |
          echo "📦 Validating dependency management..."

          # 检查Poetry配置
          if [ -f "daemon/pyproject.toml" ]; then
            echo "✅ Found Poetry configuration in daemon/"
          else
            echo "❌ Missing daemon/pyproject.toml"
            exit 1
          fi

          # 检查Flutter配置
          if [ -f "ui/pubspec.yaml" ]; then
            echo "✅ Found Flutter configuration in ui/"
          else
            echo "❌ Missing ui/pubspec.yaml"
            exit 1
          fi

          # 检查CMake配置
          if [ -f "connectors/CMakeLists.txt" ] || [ -f "connectors/shared/CMakeLists.txt" ]; then
            echo "✅ Found CMake configuration in connectors/"
          else
            echo "❌ Missing CMake configuration in connectors/"
            exit 1
          fi

  # 验证架构组件完整性
  validate-architecture-components:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate IPC architecture components
        run: |
          echo "🔗 Validating IPC architecture..."

          # 检查IPC核心组件
          REQUIRED_IPC_FILES=(
            "daemon/services/ipc_server.py"
            "daemon/services/ipc_protocol.py"
            "daemon/services/ipc_client.py"
            "daemon/services/cross_platform_ipc.py"
          )

          for file in "${REQUIRED_IPC_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done

      - name: Validate environment isolation system
        run: |
          echo "🏠 Validating environment isolation..."

          # 检查环境管理核心文件
          REQUIRED_ENV_FILES=(
            "daemon/core/environment_manager.py"
            "daemon/scripts/initialize_environment.py"
            "daemon/config/templates"
          )

          for file in "${REQUIRED_ENV_FILES[@]}"; do
            if [ -e "$file" ]; then
              echo "✅ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done

      - name: Validate modern service architecture
        run: |
          echo "🏗️ Validating modern service architecture..."

          # 检查现代化架构组件
          REQUIRED_ARCH_FILES=(
            "daemon/core/service_facade.py"
            "daemon/core/error_handling.py"
            "daemon/core/container.py"
          )

          for file in "${REQUIRED_ARCH_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done

  # 验证数据存储架构
  validate-data-architecture:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "2.1.3"
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Validate SQLite architecture
        run: |
          echo "💾 Validating SQLite data architecture..."
          cd daemon
          poetry install --no-interaction

          # 检查SQLAlchemy配置
          if poetry run python -c "from sqlalchemy import __version__; print(f'SQLAlchemy version: {__version__}')"; then
            echo "✅ SQLAlchemy available"
          else
            echo "❌ SQLAlchemy not available"
            exit 1
          fi

          # 检查SQLCipher支持
          if poetry run python -c "import sqlcipher3; print('SQLCipher support available')"; then
            echo "✅ SQLCipher support available"
          else
            echo "⚠️  SQLCipher support not available (acceptable for development)"
          fi

      - name: Validate AI/ML dependencies
        run: |
          echo "🤖 Validating AI/ML architecture..."
          cd daemon

          # 检查FAISS
          if poetry run python -c "import faiss; print(f'FAISS version: {faiss.__version__}')"; then
            echo "✅ FAISS available"
          else
            echo "❌ FAISS not available"
            exit 1
          fi

          # 检查NetworkX
          if poetry run python -c "import networkx as nx; print(f'NetworkX version: {nx.__version__}')"; then
            echo "✅ NetworkX available"
          else
            echo "❌ NetworkX not available"
            exit 1
          fi

          # 检查Sentence Transformers
          if poetry run python -c "import sentence_transformers; print('Sentence Transformers available')"; then
            echo "✅ Sentence Transformers available"
          else
            echo "❌ Sentence Transformers not available"
            exit 1
          fi

  # 验证跨平台构建支持
  validate-cross-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Validate platform-specific components
        shell: bash
        run: |
          echo "🖥️ Validating platform-specific components on ${{ matrix.os }}..."

          case "${{ matrix.os }}" in
            "ubuntu-latest")
              echo "Checking Linux-specific files..."
              if [ -f "daemon/services/cross_platform_ipc.py" ]; then
                echo "✅ Unix Socket support available"
              fi
              ;;
            "macos-latest")
              echo "Checking macOS-specific files..."
              if [ -f "connectors/official/clipboard/src/platform/macos_clipboard.mm" ]; then
                echo "✅ macOS clipboard support available"
              fi
              ;;
            "windows-latest")
              echo "Checking Windows-specific files..."
              if [ -f "daemon/services/windows_named_pipe.py" ]; then
                echo "✅ Windows Named Pipe support available"
              fi
              if [ -f "connectors/official/clipboard/src/platform/windows_clipboard.cpp" ]; then
                echo "✅ Windows clipboard support available"
              fi
              ;;
          esac

  # 验证测试架构完整性
  validate-test-architecture:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate test structure
        run: |
          echo "🧪 Validating test architecture..."

          # 检查Daemon测试
          DAEMON_TEST_FILES=(
            "daemon/tests/test_core_components.py"
            "daemon/tests/test_ipc_integration.py"
            "daemon/tests/test_architecture_performance.py"
          )

          for file in "${DAEMON_TEST_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found $file"
            else
              echo "⚠️  Missing $file (may need creation)"
            fi
          done

          # 检查UI测试
          if [ -d "ui/test" ]; then
            echo "✅ Found UI test directory"
            if [ -f "ui/test/widget_test.dart" ]; then
              echo "✅ Found basic widget tests"
            fi
          fi

  # 生成架构验证报告
  generate-validation-report:
    needs: [
      validate-tech-stack,
      validate-architecture-components,
      validate-data-architecture,
      validate-cross-platform,
      validate-test-architecture
    ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Architecture Validation Summary
        run: |
          echo "🏗️ Architecture Validation Summary"
          echo "================================="
          echo ""
          echo "📊 Validation Results:"
          echo "- Tech Stack Validation: ${{ needs.validate-tech-stack.result }}"
          echo "- Architecture Components: ${{ needs.validate-architecture-components.result }}"
          echo "- Data Architecture: ${{ needs.validate-data-architecture.result }}"
          echo "- Cross-Platform Support: ${{ needs.validate-cross-platform.result }}"
          echo "- Test Architecture: ${{ needs.validate-test-architecture.result }}"
          echo ""

          # 统计验证结果
          SUCCESS=0
          FAILURE=0

          RESULTS=(
            "${{ needs.validate-tech-stack.result }}"
            "${{ needs.validate-architecture-components.result }}"
            "${{ needs.validate-data-architecture.result }}"
            "${{ needs.validate-cross-platform.result }}"
            "${{ needs.validate-test-architecture.result }}"
          )

          for result in "${RESULTS[@]}"; do
            if [[ "$result" == "success" ]]; then
              SUCCESS=$((SUCCESS + 1))
            else
              FAILURE=$((FAILURE + 1))
            fi
          done

          echo "📈 Overall Results: $SUCCESS/5 validations passed"

          if [ $FAILURE -eq 0 ]; then
            echo "✅ All architecture validations passed!"
            echo "🎯 CI/CD configuration is fully aligned with project architecture"
          else
            echo "❌ $FAILURE validation(s) failed"
            echo "🔧 CI/CD configuration needs adjustment to match project architecture"
            exit 1
          fi

      - name: Architecture recommendations
        if: always()
        run: |
          echo ""
          echo "🎯 Architecture Alignment Recommendations:"
          echo "========================================="
          echo "1. ✅ Pure IPC Architecture - No HTTP/REST APIs"
          echo "2. ✅ SQLite + SQLCipher - No PostgreSQL/MySQL"
          echo "3. ✅ Environment Isolation - ~/.linch-mind/{env}/"
          echo "4. ✅ Modern Service Architecture - ServiceFacade + DI"
          echo "5. ✅ Multi-language Build - Python + Flutter + C++"
          echo "6. ✅ AI/ML Ready - FAISS + NetworkX + Transformers"
          echo ""
          echo "💡 This validation ensures CI/CD scripts match the actual project architecture!"
