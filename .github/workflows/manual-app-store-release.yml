name: üì± Manual App Store Release

# Ëøô‰∏™Â∑•‰ΩúÊµÅ‰ªÖÂú®ÊâãÂä®Ëß¶ÂèëÊó∂ËøêË°åÔºåÁî®‰∫éÂ∞ÜÂ∑≤ÂèëÂ∏ÉÁöÑGitHub ReleaseÊèê‰∫§Âà∞Â∫îÁî®ÂïÜÂ∫ó
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'GitHub Release tag to publish to app stores (e.g., v1.0.0)'
        required: true
        type: string
      target_stores:
        description: 'Target app stores'
        required: true
        type: choice
        options:
        - google_play_only
        - app_store_only
        - both_stores
        - test_flight_only
      skip_review:
        description: 'Skip store review (for testing)'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: "3.24.3"

jobs:
  # È™åËØÅReleaseÂ≠òÂú®
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check.outputs.exists }}
      release_url: ${{ steps.check.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if release exists
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ github.event.inputs.release_tag }}'
              });
              
              core.setOutput('exists', 'true');
              core.setOutput('url', release.data.html_url);
              
              console.log(`‚úÖ Found release: ${release.data.name}`);
              console.log(`üì¶ Assets: ${release.data.assets.length}`);
              
            } catch (error) {
              core.setOutput('exists', 'false');
              core.setFailed(`‚ùå Release not found: ${{ github.event.inputs.release_tag }}`);
            }

  # Google PlayÂèëÂ∏É
  publish-to-google-play:
    needs: validate-release
    if: needs.validate-release.outputs.release_exists == 'true' && (github.event.inputs.target_stores == 'google_play_only' || github.event.inputs.target_stores == 'both_stores')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Decode signing key
        if: secrets.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/linch-mind-release.keystore
      
      - name: Build Android App Bundle
        run: |
          cd ui
          flutter pub get
          flutter build appbundle --release
        env:
          ANDROID_KEYSTORE_PATH: ../android/app/linch-mind-release.keystore
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      
      - name: Upload to Google Play Console
        if: secrets.GOOGLE_PLAY_SERVICE_ACCOUNT != '' && github.event.inputs.skip_review != 'true'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.linchmind.app
          releaseFiles: ui/build/app/outputs/bundle/release/app-release.aab
          track: internal  # internal -> alpha -> beta -> production
          status: draft
          whatsNewDirectory: fastlane/metadata/android/en-US/changelogs
      
      - name: Create Play Store draft (testing)
        if: github.event.inputs.skip_review == 'true'
        run: |
          echo "üöÄ Would upload to Google Play Console:"
          echo "  - Package: com.linchmind.app"  
          echo "  - Track: internal (draft)"
          echo "  - File: ui/build/app/outputs/bundle/release/app-release.aab"
          echo "  - Version: ${{ github.event.inputs.release_tag }}"

  # App StoreÂèëÂ∏É
  publish-to-app-store:
    needs: validate-release
    if: needs.validate-release.outputs.release_exists == 'true' && (github.event.inputs.target_stores == 'app_store_only' || github.event.inputs.target_stores == 'both_stores' || github.event.inputs.target_stores == 'test_flight_only')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: Install certificates
        if: secrets.IOS_CERTIFICATE_BASE64 != ''
        run: |
          # ÂàõÂª∫‰∏¥Êó∂keychain
          security create-keychain -p temp_password temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p temp_password temp.keychain
          
          # ÂØºÂÖ•ËØÅ‰π¶
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k temp.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          
          # ÂØºÂÖ•provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/linch_mind.mobileprovision
      
      - name: Build iOS app
        run: |
          cd ui
          flutter pub get
          flutter build ios --release --no-codesign
      
      - name: Build and archive
        run: |
          cd ui/ios
          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -archivePath Runner.xcarchive \
                     -configuration Release \
                     archive
      
      - name: Export IPA
        run: |
          cd ui/ios
          xcodebuild -exportArchive \
                     -archivePath Runner.xcarchive \
                     -exportPath . \
                     -exportOptionsPlist ExportOptions.plist
      
      - name: Upload to TestFlight
        if: secrets.APPLE_CONNECT_PRIVATE_KEY != '' && github.event.inputs.skip_review != 'true'
        run: |
          cd ui/ios
          xcrun altool --upload-app \
                       --type ios \
                       --file Runner.ipa \
                       --username "${{ secrets.APPLE_CONNECT_USERNAME }}" \
                       --password "${{ secrets.APPLE_CONNECT_PASSWORD }}"
      
      - name: Submit to App Store (if not TestFlight only)
        if: github.event.inputs.target_stores != 'test_flight_only' && secrets.APPLE_CONNECT_PRIVATE_KEY != '' && github.event.inputs.skip_review != 'true'
        run: |
          echo "üçé Submitting to App Store Connect for review..."
          # ËøôÈáåÊ∑ªÂä†App Store Connect APIË∞ÉÁî®
          # Â∞ÜTestFlightÁâàÊú¨Êèê‰∫§ÂÆ°Ê†∏
      
      - name: Create App Store draft (testing)
        if: github.event.inputs.skip_review == 'true'
        run: |
          echo "üöÄ Would upload to App Store Connect:"
          echo "  - Bundle ID: com.linchmind.app"
          echo "  - Track: ${{ github.event.inputs.target_stores }}"
          echo "  - Version: ${{ github.event.inputs.release_tag }}"

  # ÂèëÂ∏ÉÊÄªÁªì
  app-store-release-summary:
    needs: [validate-release, publish-to-google-play, publish-to-app-store]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: App Store Release Summary
        run: |
          echo "üì± App Store Release Summary"
          echo "=========================="
          echo "Release: ${{ github.event.inputs.release_tag }}"
          echo "Target Stores: ${{ github.event.inputs.target_stores }}"
          echo "GitHub Release: ${{ needs.validate-release.outputs.release_url }}"
          echo ""
          echo "Results:"
          echo "- Google Play: ${{ needs.publish-to-google-play.result }}"
          echo "- App Store: ${{ needs.publish-to-app-store.result }}"
          echo ""
          
          if [[ "${{ github.event.inputs.skip_review }}" == "true" ]]; then
            echo "‚ö†Ô∏è  Test mode - No actual submission to app stores"
          else
            echo "üöÄ Apps submitted for store review"
            echo ""
            echo "Next steps:"
            echo "1. Check Google Play Console for review status"
            echo "2. Check App Store Connect for TestFlight/review status"
            echo "3. Monitor app store approval process"
          fi