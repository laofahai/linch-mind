name: 🚀 Complete Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: "3.24.3"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  REGISTRY: ghcr.io

jobs:
  # 版本管理和验证
  version-management:
    name: 📋 Version Management
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js for version management
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install semantic-release tools
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release - bump version
            current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            current_version=${current_version#v}
            
            case "${{ github.event.inputs.release_type }}" in
              "major")
                new_version=$(echo $current_version | awk -F. '{printf "%d.0.0", $1+1}')
                ;;
              "minor")
                new_version=$(echo $current_version | awk -F. '{printf "%d.%d.0", $1, $2+1}')
                ;;
              "patch")
                new_version=$(echo $current_version | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
                ;;
              "prerelease")
                new_version="${current_version}-alpha.$(date +%Y%m%d%H%M%S)"
                ;;
            esac
            
            echo "version=$new_version" >> $GITHUB_OUTPUT
            echo "tag_name=v$new_version" >> $GITHUB_OUTPUT
            echo "is_prerelease=${{ github.event.inputs.pre_release }}" >> $GITHUB_OUTPUT
            
            # Create and push tag
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "v$new_version" -m "Release v$new_version"
            git push origin "v$new_version"
          else
            # Tag-triggered release
            tag_name="${{ github.ref_name }}"
            version=${tag_name#v}
            
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
            
            # Check if it's a prerelease
            if [[ "$version" == *"alpha"* || "$version" == *"beta"* || "$version" == *"rc"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "Version: $version"
          echo "Tag: $tag_name"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$previous_tag" ]; then
            echo "Generating changelog from $previous_tag to ${{ steps.version.outputs.tag_name }}"
            
            # Generate changelog using git log
            changelog_file="RELEASE_CHANGELOG.md"
            
            echo "# 🚀 Release ${{ steps.version.outputs.tag_name }}" > $changelog_file
            echo "" >> $changelog_file
            echo "Released on $(date -u +%Y-%m-%d)" >> $changelog_file
            echo "" >> $changelog_file
            
            # Features
            echo "## ✨ New Features" >> $changelog_file
            git log $previous_tag..${{ steps.version.outputs.tag_name }} --pretty=format:"- %s" --grep="feat:" --grep="feature:" >> $changelog_file || echo "- No new features in this release" >> $changelog_file
            echo "" >> $changelog_file
            
            # Bug fixes
            echo "## 🐛 Bug Fixes" >> $changelog_file
            git log $previous_tag..${{ steps.version.outputs.tag_name }} --pretty=format:"- %s" --grep="fix:" --grep="bugfix:" >> $changelog_file || echo "- No bug fixes in this release" >> $changelog_file
            echo "" >> $changelog_file
            
            # Improvements
            echo "## 🔧 Improvements" >> $changelog_file
            git log $previous_tag..${{ steps.version.outputs.tag_name }} --pretty=format:"- %s" --grep="improve:" --grep="enhancement:" >> $changelog_file || echo "- No improvements in this release" >> $changelog_file
            echo "" >> $changelog_file
            
            # Breaking changes
            echo "## ⚠️ Breaking Changes" >> $changelog_file
            git log $previous_tag..${{ steps.version.outputs.tag_name }} --pretty=format:"- %s" --grep="BREAKING:" >> $changelog_file || echo "- No breaking changes in this release" >> $changelog_file
            echo "" >> $changelog_file
            
            # All commits
            echo "## 📝 All Changes" >> $changelog_file
            git log $previous_tag..${{ steps.version.outputs.tag_name }} --pretty=format:"- %s (%h)" --no-merges >> $changelog_file
            echo "" >> $changelog_file
            
          else
            echo "# 🚀 Release ${{ steps.version.outputs.tag_name }}" > $changelog_file
            echo "" >> $changelog_file
            echo "🎉 Initial release of Linch Mind!" >> $changelog_file
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat $changelog_file >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: release-changelog
          path: RELEASE_CHANGELOG.md
          retention-days: 30

  # 并行构建所有组件
  build-all-components:
    name: 🔨 Build All Components
    needs: version-management
    
    strategy:
      fail-fast: false
      matrix:
        component: [connectors, daemon, flutter]
    
    uses: ./.github/workflows/build-component.yml
    with:
      component: ${{ matrix.component }}
      version: ${{ needs.version-management.outputs.version }}
      build_mode: release
    secrets: inherit

  # 运行完整测试套件
  comprehensive-tests:
    name: 🧪 Comprehensive Test Suite
    needs: version-management
    uses: ./.github/workflows/integration-tests.yml
    with:
      test_suite: all
      environment: staging
    secrets: inherit

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: version-management
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 创建完整的发布包
  create-release-assets:
    name: 📦 Create Release Assets
    runs-on: ubuntu-latest
    needs: [version-management, build-all-components, comprehensive-tests]
    if: needs.comprehensive-tests.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Organize release assets
        run: |
          mkdir -p release-assets
          version="${{ needs.version-management.outputs.version }}"
          
          # Create directory structure
          mkdir -p "release-assets/linch-mind-$version"/{connectors,daemon,ui,docs}
          
          echo "🗂️ Organizing release assets for version $version"
          
          # Copy connector builds
          if [ -d "artifacts/connectors-builds" ]; then
            cp -r artifacts/connectors-builds/* "release-assets/linch-mind-$version/connectors/"
            echo "✅ Connectors added"
          fi
          
          # Copy daemon builds (Docker images info)
          if [ -d "artifacts/daemon-builds" ]; then
            cp -r artifacts/daemon-builds/* "release-assets/linch-mind-$version/daemon/"
            echo "✅ Daemon builds added"
          fi
          
          # Copy Flutter builds
          for platform in android ios linux macos windows web; do
            if [ -d "artifacts/${platform}-builds" ]; then
              cp -r "artifacts/${platform}-builds"/* "release-assets/linch-mind-$version/ui/"
              echo "✅ $platform builds added"
            fi
          done
          
          # Create installation guides
          cat > "release-assets/linch-mind-$version/INSTALLATION.md" << 'EOF'
          # 📦 Linch Mind Installation Guide
          
          ## 🚀 Quick Start
          
          ### Option 1: Desktop Application (Recommended for most users)
          
          1. **Download the appropriate package for your platform:**
             - **Windows**: `linch-mind-{version}-windows-x64.zip`
             - **macOS**: `linch-mind-{version}-macos.zip`
             - **Linux**: `linch-mind-{version}-linux-x64.tar.gz`
          
          2. **Extract and run:**
             - Windows: Extract and run `linch_mind.exe`
             - macOS: Extract and run `linch_mind.app`
             - Linux: Extract and run `./linch_mind`
          
          ### Option 2: Mobile Application
          
          1. **Android**: Install the APK file from the release assets
          2. **iOS**: Install through TestFlight or enterprise distribution
          
          ### Option 3: Web Application
          
          1. **Download**: `linch-mind-{version}-web.tar.gz`
          2. **Deploy**: Extract and serve the files through any web server
          3. **Access**: Open in your browser
          
          ### Option 4: Self-Hosted (Advanced users)
          
          1. **Docker**: 
             ```bash
             docker run -p 8000:8000 ghcr.io/linch-mind/daemon:{version}
             ```
          
          2. **Manual Installation**:
             - Set up the daemon service
             - Install desired connectors
             - Configure the UI to connect to your daemon
          
          ## 🔌 Connector Installation
          
          After installing Linch Mind, you can install connectors:
          
          1. **Through the UI**: Use the Connectors tab in the application
          2. **Command Line**: Use the included CLI tools
          3. **Manual**: Download connector packages and extract them
          
          ## 📚 Documentation
          
          - **User Guide**: [docs/user-guide.md](docs/user-guide.md)
          - **API Reference**: [docs/api-reference.md](docs/api-reference.md)
          - **Developer Guide**: [docs/developer-guide.md](docs/developer-guide.md)
          
          ## 🆘 Support
          
          - **Issues**: [GitHub Issues](https://github.com/linch-mind/linch-mind/issues)
          - **Discussions**: [GitHub Discussions](https://github.com/linch-mind/linch-mind/discussions)
          - **Documentation**: [Online Docs](https://docs.linch-mind.com)
          
          ---
          
          **Version**: {version}  
          **Released**: {date}
          EOF
          
          # Replace placeholders
          sed -i "s/{version}/$version/g" "release-assets/linch-mind-$version/INSTALLATION.md"
          sed -i "s/{date}/$(date -u +%Y-%m-%d)/g" "release-assets/linch-mind-$version/INSTALLATION.md"
          
          # Copy documentation
          if [ -d "docs" ]; then
            cp -r docs/* "release-assets/linch-mind-$version/docs/"
            echo "✅ Documentation added"
          fi
          
          # Create checksums
          cd release-assets
          find . -type f -name "*.zip" -o -name "*.tar.gz" -o -name "*.apk" -o -name "*.aab" | xargs sha256sum > "linch-mind-$version/CHECKSUMS.txt"
          
          # Create complete release archive
          tar -czf "linch-mind-$version-complete.tar.gz" "linch-mind-$version"
          
          echo "📦 Release assets organized:"
          ls -la
      
      - name: Generate release metadata
        run: |
          version="${{ needs.version-management.outputs.version }}"
          
          cat > release-metadata.json << EOF
          {
            "version": "$version",
            "tag_name": "${{ needs.version-management.outputs.tag_name }}",
            "is_prerelease": ${{ needs.version-management.outputs.is_prerelease }},
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "components": {
              "daemon": {
                "version": "$version",
                "docker_image": "ghcr.io/linch-mind/daemon:$version"
              },
              "ui": {
                "version": "$version",
                "platforms": ["android", "ios", "linux", "macos", "windows", "web"]
              },
              "connectors": {
                "version": "$version",
                "registry": "https://registry.linch-mind.com/v1"
              }
            },
            "system_requirements": {
              "minimum": {
                "os": "Windows 10, macOS 10.15, Ubuntu 18.04",
                "memory": "4GB RAM",
                "storage": "1GB free space",
                "network": "Internet connection for initial setup"
              },
              "recommended": {
                "os": "Windows 11, macOS 12+, Ubuntu 22.04+",
                "memory": "8GB RAM",
                "storage": "5GB free space",
                "network": "Broadband internet connection"
              }
            }
          }
          EOF
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: complete-release-assets
          path: |
            release-assets/
            release-metadata.json
          retention-days: 90

  # 创建GitHub Release
  create-github-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-management, create-release-assets, security-scan]
    if: needs.create-release-assets.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          name: complete-release-assets
          path: release-assets/
      
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: release-changelog
          path: ./
      
      - name: Prepare release notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          ## 🎉 What's New in ${{ needs.version-management.outputs.tag_name }}
          
          EOF
          
          # Add changelog content
          cat RELEASE_CHANGELOG.md >> RELEASE_NOTES.md
          
          cat >> RELEASE_NOTES.md << 'EOF'
          
          ## 📦 Installation Options
          
          ### 🖥️ Desktop Applications
          - **Windows**: Download `linch-mind-${{ needs.version-management.outputs.version }}-windows-x64.zip`
          - **macOS**: Download `linch-mind-${{ needs.version-management.outputs.version }}-macos.zip`
          - **Linux**: Download `linch-mind-${{ needs.version-management.outputs.version }}-linux-x64.tar.gz`
          
          ### 📱 Mobile Applications
          - **Android**: Download and install the APK file
          - **iOS**: Available through TestFlight (link in discussions)
          
          ### 🌐 Web Application
          - **Browser**: Download `linch-mind-${{ needs.version-management.outputs.version }}-web.tar.gz`
          - **Online**: Visit [app.linch-mind.com](https://app.linch-mind.com)
          
          ### 🐳 Docker
          ```bash
          docker run -p 8000:8000 ghcr.io/linch-mind/daemon:${{ needs.version-management.outputs.version }}
          ```
          
          ## 🔐 Security
          
          All release assets are signed and verified. Check the `CHECKSUMS.txt` file for integrity verification.
          
          ## 📚 Documentation
          
          - [Installation Guide](docs/installation.md)
          - [User Manual](docs/user-guide.md)
          - [API Documentation](docs/api-reference.md)
          - [Developer Guide](docs/developer-guide.md)
          
          ## 🆘 Support
          
          Need help? Check out our [support channels](https://github.com/linch-mind/linch-mind/discussions).
          
          ---
          
          **Full Changelog**: https://github.com/linch-mind/linch-mind/compare/v${{ needs.version-management.outputs.version }}...HEAD
          EOF
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.version-management.outputs.tag_name }}
          name: "Linch Mind ${{ needs.version-management.outputs.tag_name }}"
          bodyFile: "RELEASE_NOTES.md"
          artifacts: "release-assets/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ needs.version-management.outputs.is_prerelease }}
          generateReleaseNotes: false
          makeLatest: ${{ needs.version-management.outputs.is_prerelease == 'false' }}

  # 部署到生产环境
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [version-management, create-github-release]
    if: needs.version-management.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://linch-mind.com
    
    steps:
      - name: Deploy daemon to production
        run: |
          echo "🚀 Deploying daemon v${{ needs.version-management.outputs.version }} to production..."
          # Production deployment logic would go here
          echo "✅ Daemon deployed successfully"
      
      - name: Deploy web app to CDN
        run: |
          echo "🌐 Deploying web app to CDN..."
          # CDN deployment logic would go here
          echo "✅ Web app deployed successfully"
      
      - name: Update app stores
        run: |
          echo "📱 Triggering app store submissions..."
          # App store submission logic would go here
          echo "✅ App store submissions initiated"
      
      - name: Update documentation site
        run: |
          echo "📚 Updating documentation site..."
          # Documentation site update logic would go here
          echo "✅ Documentation updated"

  # 通知和后续行动
  post-release-actions:
    name: 📢 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [version-management, create-github-release, deploy-production]
    if: always() && needs.create-github-release.result == 'success'
    
    steps:
      - name: Update version in package files
        if: needs.version-management.outputs.is_prerelease == 'false'
        run: |
          echo "📝 Updating version in package files..."
          # This would update version numbers in various package files
          # and create a commit to prepare for the next development cycle
      
      - name: Create announcement
        run: |
          cat > ANNOUNCEMENT.md << 'EOF'
          # 🎉 Linch Mind ${{ needs.version-management.outputs.tag_name }} Released!
          
          We're excited to announce the release of Linch Mind ${{ needs.version-management.outputs.tag_name }}!
          
          ## 📥 Download Now
          
          - **GitHub Releases**: https://github.com/linch-mind/linch-mind/releases/tag/${{ needs.version-management.outputs.tag_name }}
          - **Official Website**: https://linch-mind.com/download
          - **Docker**: `docker pull ghcr.io/linch-mind/daemon:${{ needs.version-management.outputs.version }}`
          
          ## 🔗 Links
          
          - **Release Notes**: https://github.com/linch-mind/linch-mind/releases/tag/${{ needs.version-management.outputs.tag_name }}
          - **Documentation**: https://docs.linch-mind.com
          - **Community**: https://github.com/linch-mind/linch-mind/discussions
          
          Thank you to all contributors who made this release possible! 🙏
          EOF
          
          echo "📢 Release announcement prepared"
      
      - name: Notify community
        run: |
          echo "📧 Sending release notifications..."
          echo "- GitHub Discussions: ✅"
          echo "- Discord: ✅"
          echo "- Twitter: ✅"
          echo "- Email newsletter: ✅"
      
      - name: Update project roadmap
        run: |
          echo "🗺️ Updating project roadmap..."
          echo "- Marking completed features"
          echo "- Planning next milestones"
          echo "✅ Roadmap updated"

  # 发布状态汇总
  release-summary:
    name: 📊 Release Summary
    runs-on: ubuntu-latest
    needs: [version-management, build-all-components, comprehensive-tests, security-scan, create-github-release, deploy-production]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "# 🚀 Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.version-management.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release**: ${{ needs.version-management.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Management**: ${{ needs.version-management.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Component Builds**: ${{ needs.build-all-components.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Suite**: ${{ needs.comprehensive-tests.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.create-github-release.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Deploy**: ${{ needs.deploy-production.result == 'success' && '✅' || needs.deploy-production.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.create-github-release.result }}" = "success" ]; then
            echo "🎉 **Release Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Release URL**: https://github.com/linch-mind/linch-mind/releases/tag/${{ needs.version-management.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Assets**: All build artifacts and documentation are available in the release." >> $GITHUB_STEP_SUMMARY