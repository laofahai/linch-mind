name: 🔗 Connector Build

on:
  push:
    branches: [ main ]
    paths:
      - 'connectors/official/**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd connectors
          pip install poetry pyyaml pyinstaller
          poetry install

      - name: Detect changes and bump versions
        run: |
          cd connectors
          
          # 检测变更的连接器
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep '^connectors/official/' || true)
          
          if [ -z "$changed_files" ]; then
            echo "No connector changes detected"
            exit 0
          fi
          
          # 提取连接器名称
          changed_connectors=$(echo "$changed_files" | grep -E '^connectors/official/[^/]+/' | sed 's|connectors/official/\([^/]*\)/.*|\1|' | sort -u)
          
          echo "Changed connectors: $changed_connectors"
          echo "CHANGED_CONNECTORS=$changed_connectors" >> $GITHUB_ENV
          
          # 简单版本递增（先实现最基本的功能）
          for connector in $changed_connectors; do
            config_file="official/$connector/connector.json"
            if [ -f "$config_file" ]; then
              echo "Processing $connector..."
              
              # 获取当前版本并递增patch
              python3 << 'EOF'
import json
import sys

config_file = sys.argv[1]
with open(config_file, 'r') as f:
    data = json.load(f)

current_version = data.get('version', '0.0.1')
parts = current_version.split('.')
if len(parts) >= 3:
    parts[2] = str(int(parts[2]) + 1)
    new_version = '.'.join(parts)
else:
    new_version = '0.0.2'

print(f"Bumping {config_file}: {current_version} -> {new_version}")

# 更新 connector.json
data['version'] = new_version
with open(config_file, 'w') as f:
    json.dump(data, f, indent=2, ensure_ascii=False)

# 更新 connectors.yaml
import yaml
with open('connectors.yaml', 'r') as f:
    yaml_data = yaml.safe_load(f)

connector_name = data['id']
if 'connectors' in yaml_data and connector_name in yaml_data['connectors']:
    yaml_data['connectors'][connector_name]['version'] = new_version
    with open('connectors.yaml', 'w') as f:
        yaml.dump(yaml_data, f, default_flow_style=False, allow_unicode=True)

print(f"✅ Updated {connector_name} to version {new_version}")
EOF "$config_file"
            fi
          done

      - name: Build connectors
        if: env.CHANGED_CONNECTORS != ''
        run: |
          cd connectors
          
          for connector in $CHANGED_CONNECTORS; do
            echo "🚀 Building $connector..."
            
            cd "official/$connector"
            
            # 使用统一的构建逻辑
            python3 << 'EOF'
import PyInstaller.__main__
import json
import sys
import os

config_file = 'connector.json'
if not os.path.exists(config_file):
    print(f"❌ {config_file} not found")
    sys.exit(1)

with open(config_file, 'r') as f:
    config = json.load(f)

connector_name = config['id']
main_script = 'main.py'

if not os.path.exists(main_script):
    print(f"❌ {main_script} not found")
    sys.exit(1)

# 构建参数
args = [
    main_script,
    '--onefile',
    f'--name={connector_name}-connector',
    '--distpath=../../dist',
    '--clean',
    '--noconfirm',
    '--hidden-import=watchdog',
    '--hidden-import=httpx', 
    '--hidden-import=pyperclip',
]

print(f"🔧 Building with PyInstaller: {args}")
PyInstaller.__main__.run(args)
print(f"✅ Built {connector_name}")
EOF
            
            cd ../..
          done

      - name: Update registry
        if: env.CHANGED_CONNECTORS != ''
        run: |
          cd connectors
          
          python3 << 'EOF'
import json
import yaml
import os
from datetime import datetime

# 读取connectors.yaml
with open('connectors.yaml', 'r') as f:
    connectors_config = yaml.safe_load(f)

registry = {
    'schema_version': '1.0',
    'last_updated': datetime.utcnow().isoformat() + 'Z',
    'connectors': {},
    'metadata': {
        'repository': os.environ.get('GITHUB_REPOSITORY', 'unknown'),
        'commit': os.environ.get('GITHUB_SHA', 'unknown')
    }
}

# 遍历所有连接器
for connector_id, connector_info in connectors_config.get('connectors', {}).items():
    config_path = f'official/{connector_id}/connector.json'
    if os.path.exists(config_path):
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        registry['connectors'][connector_id] = {
            'id': config['id'],
            'name': config['name'],
            'version': config['version'],
            'description': config['description'],
            'author': config['author'],
            'category': config['category'],
            'platforms': config.get('platforms', {}),
            'permissions': config.get('permissions', []),
            'capabilities': config.get('capabilities', {}),
        }

# 保存注册表
with open('registry.json', 'w') as f:
    json.dump(registry, f, indent=2, ensure_ascii=False)

print(f'✅ Registry updated with {len(registry["connectors"])} connectors')
EOF

      - name: Commit changes
        if: env.CHANGED_CONNECTORS != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: auto-update connector versions [skip ci]

Updated connectors: $CHANGED_CONNECTORS

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
          git push

      - name: Upload artifacts
        if: env.CHANGED_CONNECTORS != ''
        uses: actions/upload-artifact@v3
        with:
          name: connectors
          path: connectors/dist/