name: 🚀 Flutter Multi-Platform Build & Release

on:
  push:
    branches: [main, develop]
    paths:
      - 'ui/**'
      - '.github/workflows/flutter-build.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [main]
    paths:
      - 'ui/**'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: android,ios,linux,macos,windows,web)'
        required: false
        default: 'linux,macos,windows'
        type: string
      build_mode:
        description: 'Build mode'
        required: false
        default: 'release'
        type: choice
        options:
          - debug
          - profile
          - release

env:
  FLUTTER_VERSION: "3.24.3"
  JAVA_VERSION: "17"
  XCODE_VERSION: "15.0"

jobs:
  # 变更检测和预检查
  detect-changes:
    name: 🔍 Detect Changes & Validate
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      build_mode: ${{ steps.config.outputs.build_mode }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for UI changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^ui/' || true)
            if [ -n "$CHANGED_FILES" ]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "UI changes detected:"
              echo "$CHANGED_FILES"
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "No UI changes detected"
            fi
          fi
      
      - name: Determine build platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 发布版本构建所有平台
            PLATFORMS="android,ios,linux,macos,windows,web"
          else
            # 开发版本只构建桌面平台
            PLATFORMS="linux,macos,windows"
          fi
          
          # 转换为JSON数组
          PLATFORMS_JSON=$(echo "$PLATFORMS" | jq -R 'split(",") | map(select(length > 0))')
          echo "platforms=$PLATFORMS_JSON" >> $GITHUB_OUTPUT
          echo "Will build for platforms: $PLATFORMS"
      
      - name: Determine build configuration
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUILD_MODE="${{ github.event.inputs.build_mode }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            BUILD_MODE="release"
          else
            BUILD_MODE="debug"
          fi
          
          echo "build_mode=$BUILD_MODE" >> $GITHUB_OUTPUT
          echo "Build mode: $BUILD_MODE"
      
      - name: Extract version information
        id: version
        run: |
          cd ui
          
          # 从pubspec.yaml提取版本
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          
          # 如果是tag，验证版本一致性
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            PUBSPEC_VERSION=$(echo "$VERSION" | cut -d'+' -f1)
            
            if [ "v$PUBSPEC_VERSION" != "$TAG_VERSION" ]; then
              echo "❌ Version mismatch: tag $TAG_VERSION vs pubspec $PUBSPEC_VERSION"
              exit 1
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App version: $VERSION"

  # Flutter代码质量检查
  quality-check:
    name: 🔍 Flutter Quality Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_build == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Flutter doctor
        run: flutter doctor -v
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Verify dependencies
        run: |
          cd ui
          flutter pub deps
      
      - name: Run code analysis
        run: |
          cd ui
          flutter analyze . --fatal-infos
      
      - name: Check formatting
        run: |
          cd ui
          dart format --set-exit-if-changed .
      
      - name: Run tests
        run: |
          cd ui
          flutter test --coverage --reporter=github
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ui/coverage/lcov.info
          flags: flutter
          name: flutter-coverage

  # Android构建
  build-android:
    name: 🤖 Build Android
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.should_build == 'true' && contains(fromJson(needs.detect-changes.outputs.platforms), 'android')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Build APK
        run: |
          cd ui
          flutter build apk --${{ needs.detect-changes.outputs.build_mode }} --verbose
      
      - name: Build App Bundle
        if: needs.detect-changes.outputs.build_mode == 'release'
        run: |
          cd ui
          flutter build appbundle --release --verbose
      
      - name: Sign APK (if release)
        if: needs.detect-changes.outputs.build_mode == 'release' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          cd ui
          # APK签名逻辑（需要配置密钥）
          echo "APK signing would happen here with proper keys"
      
      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            ui/build/app/outputs/flutter-apk/*.apk
            ui/build/app/outputs/bundle/release/*.aab
          retention-days: 30

  # iOS构建
  build-ios:
    name: 🍎 Build iOS
    runs-on: macos-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.should_build == 'true' && contains(fromJson(needs.detect-changes.outputs.platforms), 'ios')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
          cd ios
          pod install
      
      - name: Build iOS (no codesign)
        run: |
          cd ui
          flutter build ios --${{ needs.detect-changes.outputs.build_mode }} --no-codesign --verbose
      
      - name: Build IPA (if release)
        if: needs.detect-changes.outputs.build_mode == 'release'
        run: |
          cd ui
          # IPA构建需要适当的provisioning profile和证书
          echo "IPA building would happen here with proper certificates"
      
      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-builds
          path: |
            ui/build/ios/iphoneos/*.app
          retention-days: 30

  # 桌面平台构建
  build-desktop:
    name: 🖥️ Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.should_build == 'true' && contains(fromJson(needs.detect-changes.outputs.platforms), matrix.platform)
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            build_args: --verbose
          - platform: macos
            os: macos-latest
            build_args: --verbose
          - platform: windows
            os: windows-latest
            build_args: --verbose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Enable desktop platforms
        run: |
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Build for ${{ matrix.platform }}
        run: |
          cd ui
          flutter build ${{ matrix.platform }} --${{ needs.detect-changes.outputs.build_mode }} ${{ matrix.build_args }}
      
      - name: Package application
        run: |
          cd ui/build
          
          if [ "${{ matrix.platform }}" = "linux" ]; then
            # 创建AppImage或DEB包
            tar -czf linch-mind-${{ needs.detect-changes.outputs.version }}-linux-x64.tar.gz linux/x64/release/bundle/
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            # 创建DMG或压缩.app
            cd macos/Build/Products/Release
            zip -r linch-mind-${{ needs.detect-changes.outputs.version }}-macos.zip linch_mind.app
            mv linch-mind-${{ needs.detect-changes.outputs.version }}-macos.zip ../../..
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            # 创建ZIP包或MSI安装包
            cd windows/x64/runner/Release
            7z a linch-mind-${{ needs.detect-changes.outputs.version }}-windows-x64.zip *
            mv linch-mind-${{ needs.detect-changes.outputs.version }}-windows-x64.zip ../../../..
          fi
        shell: bash
      
      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-builds
          path: |
            ui/build/*.tar.gz
            ui/build/*.zip
            ui/build/*.dmg
            ui/build/*.msi
          retention-days: 30

  # Web构建
  build-web:
    name: 🌐 Build Web
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check]
    if: needs.detect-changes.outputs.should_build == 'true' && contains(fromJson(needs.detect-changes.outputs.platforms), 'web')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Build web
        run: |
          cd ui
          flutter build web --${{ needs.detect-changes.outputs.build_mode }} --verbose
      
      - name: Package web build
        run: |
          cd ui/build/web
          tar -czf ../linch-mind-${{ needs.detect-changes.outputs.version }}-web.tar.gz *
      
      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-builds
          path: ui/build/*.tar.gz
          retention-days: 30

  # 创建GitHub Release
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [detect-changes, build-android, build-ios, build-desktop, build-web]
    if: always() && needs.detect-changes.outputs.should_build == 'true' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # 复制并重命名构建产物
          find artifacts/ -name "*.apk" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.aab" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.zip" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.dmg" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.msi" -exec cp {} release-assets/ \;
          
          # 列出所有发布资产
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Generate changelog
        id: changelog
        run: |
          # 生成变更日志
          echo "## 🚀 Linch Mind ${{ github.ref_name }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📱 支持的平台" >> CHANGELOG.md
          echo "- 🤖 Android (APK/AAB)" >> CHANGELOG.md
          echo "- 🍎 iOS (需要开发者证书)" >> CHANGELOG.md
          echo "- 🐧 Linux (x64)" >> CHANGELOG.md
          echo "- 🍎 macOS (Intel/Apple Silicon)" >> CHANGELOG.md
          echo "- 🪟 Windows (x64)" >> CHANGELOG.md
          echo "- 🌐 Web (PWA)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📋 变更内容" >> CHANGELOG.md
          
          # 获取最近的commits作为变更日志
          git log $(git describe --tags --abbrev=0 HEAD~1)..HEAD --pretty=format:"- %s" --grep="^ui:" >> CHANGELOG.md || echo "- 首次发布" >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "### 📦 下载说明" >> CHANGELOG.md
          echo "1. **Android**: 下载 \`.apk\` 文件直接安装" >> CHANGELOG.md
          echo "2. **iOS**: 需要通过App Store或企业证书分发" >> CHANGELOG.md
          echo "3. **Desktop**: 下载对应平台的压缩包解压运行" >> CHANGELOG.md
          echo "4. **Web**: 访问在线版本或部署到服务器" >> CHANGELOG.md
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release-assets/*"
          bodyFile: "CHANGELOG.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # 部署到测试环境
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-web]
    if: needs.detect-changes.outputs.should_build == 'true' && github.ref == 'refs/heads/develop'
    
    steps:
      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-builds
          path: web-build/
      
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Web build ready for deployment"
          # 这里可以添加实际的部署逻辑，比如：
          # - 上传到CDN
          # - 部署到测试服务器
          # - 更新Docker容器
          echo "✅ Staging deployment complete"

  # 构建状态汇总
  build-summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-check, build-android, build-ios, build-desktop, build-web]
    if: always() && needs.detect-changes.outputs.should_build == 'true'
    
    steps:
      - name: Generate build summary
        run: |
          echo "## 🚀 Flutter Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.detect-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Mode**: ${{ needs.detect-changes.outputs.build_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms**: ${{ needs.detect-changes.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Check**: ${{ needs.quality-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android**: ${{ needs.build-android.result == 'success' && '✅' || needs.build-android.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS**: ${{ needs.build-ios.result == 'success' && '✅' || needs.build-ios.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Desktop**: ${{ needs.build-desktop.result == 'success' && '✅' || needs.build-desktop.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web**: ${{ needs.build-web.result == 'success' && '✅' || needs.build-web.result == 'skipped' && '⏭️' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 整体状态
          if [ "${{ needs.quality-check.result }}" = "success" ] && \
             [ "${{ needs.build-desktop.result }}" != "failure" ] && \
             [ "${{ needs.build-android.result }}" != "failure" ] && \
             [ "${{ needs.build-ios.result }}" != "failure" ] && \
             [ "${{ needs.build-web.result }}" != "failure" ]; then
            echo "🎉 **Overall Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi