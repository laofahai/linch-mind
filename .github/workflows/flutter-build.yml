name: üéØ Flutter Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ui/**'
      - '.github/workflows/flutter-build.yml'
      - '.github/config/versions.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ui/**'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: linux,macos,windows,android,ios,web)'
        required: false
        default: 'linux,macos,windows'
      build_mode:
        description: 'Build mode'
        required: false
        default: 'release'
        type: choice
        options:
        - debug
        - profile
        - release

env:
  FLUTTER_VERSION: "3.32.0"  # ÂåπÈÖçÈ°πÁõÆÂÆûÈôÖÁâàÊú¨

jobs:
  # ËØªÂèñÈÖçÁΩÆ
  load-config:
    runs-on: ubuntu-latest
    outputs:
      flutter_version: ${{ steps.config.outputs.flutter_version }}
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Load versions config
        id: config
        run: |
          FLUTTER_VERSION=$(yq '.versions.flutter' .github/config/versions.yml)
          echo "flutter_version=$FLUTTER_VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
          else
            PLATFORMS="linux,macos,windows"
          fi
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Verify formatting
        run: |
          cd ui
          dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: |
          cd ui
          flutter analyze --fatal-infos
      
      - name: Run tests
        run: |
          cd ui
          flutter test --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ui/coverage/lcov.info
          flags: flutter

  # Ê°åÈù¢Âπ≥Âè∞ÊûÑÂª∫
  build-desktop:
    needs: [load-config, quality-check]
    if: contains(needs.load-config.outputs.platforms, 'linux') || contains(needs.load-config.outputs.platforms, 'macos') || contains(needs.load-config.outputs.platforms, 'windows')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            build_args: --release
            artifact_name: linux-x64
          - platform: macos
            os: macos-latest
            build_args: --release
            artifact_name: macos-x64
          - platform: windows
            os: windows-latest
            build_args: --release
            artifact_name: windows-x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.load-config.outputs.flutter_version }}
          cache: true
      
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libstdc++-12-dev \
            libjsoncpp-dev libcurl4-openssl-dev \
            libsqlite3-dev
      
      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: |
          # macOS dependencies are typically included with Xcode
          echo "Setting up macOS build environment"
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Enable platform
        run: |
          cd ui
          flutter config --enable-${{ matrix.platform }}-desktop
      
      - name: Build for ${{ matrix.platform }}
        run: |
          cd ui
          flutter build ${{ matrix.platform }} ${{ matrix.build_args }}
      
      - name: Package build artifacts
        run: |
          cd ui
          mkdir -p ../dist/${{ matrix.artifact_name }}
          
          case "${{ matrix.platform }}" in
            "linux")
              cp -r build/linux/x64/release/bundle/* ../dist/${{ matrix.artifact_name }}/
              ;;
            "macos")
              cp -r build/macos/Build/Products/Release/linch_mind.app ../dist/${{ matrix.artifact_name }}/
              ;;
            "windows")
              cp -r build/windows/x64/runner/Release/* ../dist/${{ matrix.artifact_name }}/
              ;;
          esac
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}/
          retention-days: 30

  # ÁßªÂä®Âπ≥Âè∞ÊûÑÂª∫
  build-mobile:
    needs: [load-config, quality-check]
    if: contains(needs.load-config.outputs.platforms, 'android') || contains(needs.load-config.outputs.platforms, 'ios')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            build_args: apk --release
            artifact_name: android-apk
          - platform: ios
            os: macos-latest
            build_args: ios --release --no-codesign
            artifact_name: ios-app
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.load-config.outputs.flutter_version }}
          cache: true
      
      - name: Setup Java (for Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Build for ${{ matrix.platform }}
        run: |
          cd ui
          flutter build ${{ matrix.build_args }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-${{ matrix.artifact_name }}
          path: |
            ui/build/app/outputs/flutter-apk/*.apk
            ui/build/ios/iphoneos/*.app
          retention-days: 30

  # WebÊûÑÂª∫
  build-web:
    needs: [load-config, quality-check]
    if: contains(needs.load-config.outputs.platforms, 'web')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.load-config.outputs.flutter_version }}
          cache: true
      
      - name: Get dependencies
        run: |
          cd ui
          flutter pub get
      
      - name: Build web
        run: |
          cd ui
          flutter build web --release
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web
          path: ui/build/web/
          retention-days: 30

  # ÊûÑÂª∫ÊÄªÁªì
  build-summary:
    needs: [build-desktop, build-mobile, build-web]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "üéØ Flutter Multi-Platform Build Summary"
          echo "======================================"
          echo "Desktop builds: ${{ needs.build-desktop.result }}"
          echo "Mobile builds: ${{ needs.build-mobile.result }}"  
          echo "Web build: ${{ needs.build-web.result }}"
          
          if [[ "${{ needs.build-desktop.result }}" == "failure" || 
                "${{ needs.build-mobile.result }}" == "failure" || 
                "${{ needs.build-web.result }}" == "failure" ]]; then
            echo "‚ùå Some builds failed"
            exit 1
          else
            echo "‚úÖ All builds completed successfully"
          fi