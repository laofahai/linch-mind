name: 📦 Complete Installer Package

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        type: string
      include_ollama:
        description: 'Include Ollama in package'
        required: false
        default: true
        type: boolean
      include_models:
        description: 'Include AI models in package'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.13"      # 匹配daemon/pyproject.toml
  FLUTTER_VERSION: "3.32.0"   # 匹配ui/pubspec.yaml
  OLLAMA_VERSION: "0.1.32"
  CMAKE_VERSION: "3.16"       # 匹配connectors最低要求

jobs:
  # 准备打包环境
  prepare-packaging:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_name: ${{ steps.version.outputs.package_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          
          PACKAGE_NAME="linch-mind-$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          
          echo "📦 Package version: $VERSION"
          echo "📦 Package name: $PACKAGE_NAME"

  # Linux完整安装包
  build-linux-installer:
    needs: prepare-packaging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libstdc++-12-dev \
            clang nlohmann-json3-dev \
            dpkg-dev rpm alien \
            nsis-mingw-w64
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Create packaging directory
        run: |
          mkdir -p package/linch-mind
          cd package/linch-mind
          
          # 创建标准Linux目录结构
          mkdir -p {bin,lib,share/{applications,icons,doc},etc/linch-mind,var/lib/linch-mind}
      
      - name: Build Python Daemon
        run: |
          cd daemon
          poetry install --no-interaction
          poetry build
          
          # 创建独立的Python环境
          python -m venv ../package/linch-mind/lib/daemon-env
          ../package/linch-mind/lib/daemon-env/bin/pip install dist/*.whl
          
          # 复制项目特定配置文件
          cp -r config/templates ../package/linch-mind/etc/linch-mind/
          cp -r scripts ../package/linch-mind/lib/daemon-scripts
          
          # 复制核心服务组件
          cp -r core ../package/linch-mind/lib/daemon-core
          cp -r services ../package/linch-mind/lib/daemon-services
      
      - name: Build Flutter UI
        run: |
          cd ui
          flutter pub get
          flutter config --enable-linux-desktop
          flutter build linux --release
          
          # 复制UI到打包目录
          cp -r build/linux/x64/release/bundle/* ../package/linch-mind/lib/ui/
      
      - name: Build Connectors
        run: |
          # 构建共享库
          cd connectors/shared
          mkdir -p build && cd build
          cmake .. && make -j$(nproc)
          cd ../..
          
          # 构建官方连接器
          cd scripts
          ./build.sh
          
          # 复制连接器到打包目录
          mkdir -p ../../package/linch-mind/lib/connectors
          cp -r ../official/clipboard/bin/release/* ../../package/linch-mind/lib/connectors/
          cp -r ../official/filesystem/bin/release/* ../../package/linch-mind/lib/connectors/
          cp ../official/*/connector.json ../../package/linch-mind/lib/connectors/
      
      - name: Download Ollama
        if: github.event.inputs.include_ollama != 'false'
        run: |
          cd package/linch-mind/lib
          
          # 下载Ollama Linux版本
          wget -O ollama "https://github.com/ollama/ollama/releases/download/v${{ env.OLLAMA_VERSION }}/ollama-linux-amd64"
          chmod +x ollama
          
          echo "📥 Downloaded Ollama v${{ env.OLLAMA_VERSION }}"
      
      - name: Download AI Models
        if: github.event.inputs.include_models == 'true'
        run: |
          cd package/linch-mind/var/lib/linch-mind
          mkdir -p models
          
          # 下载基础模型
          echo "📥 Downloading AI models..."
          
          # 这里可以预下载一些小模型
          # 注意：大型模型不建议打包，应该在首次运行时下载
          
          echo "Models will be downloaded on first run" > models/README.txt
      
      - name: Create startup scripts
        run: |
          cd package/linch-mind
          
          # 创建主启动脚本
          cat > bin/linch-mind << 'EOF'
          #!/bin/bash
          
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          INSTALL_DIR="$(dirname "$SCRIPT_DIR")"
          
          export LINCH_MIND_HOME="$INSTALL_DIR"
          export PATH="$INSTALL_DIR/lib/daemon-env/bin:$PATH"
          
          # 启动daemon
          if [ "$1" = "daemon" ]; then
              cd "$INSTALL_DIR/lib/daemon-env"
              python -m main &
              echo $! > "$INSTALL_DIR/var/lib/linch-mind/daemon.pid"
              echo "Daemon started"
          # 启动UI
          elif [ "$1" = "ui" ] || [ -z "$1" ]; then
              "$INSTALL_DIR/lib/ui/linch_mind" &
              echo "UI started"
          # 完整启动
          elif [ "$1" = "start" ]; then
              $0 daemon
              sleep 2
              $0 ui
          # 停止服务
          elif [ "$1" = "stop" ]; then
              if [ -f "$INSTALL_DIR/var/lib/linch-mind/daemon.pid" ]; then
                  kill $(cat "$INSTALL_DIR/var/lib/linch-mind/daemon.pid") 2>/dev/null || true
                  rm -f "$INSTALL_DIR/var/lib/linch-mind/daemon.pid"
              fi
              pkill -f linch_mind || true
              echo "Services stopped"
          else
              echo "Usage: $0 {start|stop|daemon|ui}"
              exit 1
          fi
          EOF
          
          chmod +x bin/linch-mind
      
      - name: Create desktop entry
        run: |
          cd package/linch-mind
          
          cat > share/applications/linch-mind.desktop << EOF
          [Desktop Entry]
          Name=Linch Mind
          Comment=Personal AI Life Assistant
          Exec=$PWD/bin/linch-mind
          Icon=$PWD/share/icons/linch-mind.png
          Type=Application
          Categories=Office;Productivity;
          Terminal=false
          StartupNotify=true
          EOF
          
          # 复制图标
          cp ../../ui/assets/icons/app_icon_512.png share/icons/linch-mind.png
      
      - name: Create systemd service
        run: |
          cd package/linch-mind
          
          mkdir -p etc/systemd/system
          cat > etc/systemd/system/linch-mind.service << EOF
          [Unit]
          Description=Linch Mind Daemon
          After=network.target
          
          [Service]
          Type=forking
          User=linch-mind
          Group=linch-mind
          WorkingDirectory=$PWD
          ExecStart=$PWD/bin/linch-mind daemon
          ExecStop=$PWD/bin/linch-mind stop
          Restart=on-failure
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
      
      - name: Create installer script
        run: |
          cat > package/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Installing Linch Mind..."
          
          # 检查权限
          if [ "$EUID" -ne 0 ]; then
              echo "Please run with sudo"
              exit 1
          fi
          
          INSTALL_DIR="/opt/linch-mind"
          
          # 创建用户和组
          if ! id "linch-mind" &>/dev/null; then
              useradd -r -s /bin/false -d "$INSTALL_DIR" linch-mind
              echo "✅ Created linch-mind user"
          fi
          
          # 创建安装目录
          mkdir -p "$INSTALL_DIR"
          cp -r linch-mind/* "$INSTALL_DIR/"
          chown -R linch-mind:linch-mind "$INSTALL_DIR"
          
          # 创建符号链接
          ln -sf "$INSTALL_DIR/bin/linch-mind" /usr/local/bin/linch-mind
          
          # 安装systemd服务
          if [ -d "/etc/systemd/system" ]; then
              cp "$INSTALL_DIR/etc/systemd/system/linch-mind.service" /etc/systemd/system/
              systemctl daemon-reload
              systemctl enable linch-mind.service
              echo "✅ Systemd service installed"
          fi
          
          # 安装desktop文件
          mkdir -p /usr/share/applications
          cp "$INSTALL_DIR/share/applications/linch-mind.desktop" /usr/share/applications/
          
          echo "✅ Linch Mind installed successfully!"
          echo "Start with: sudo systemctl start linch-mind"
          echo "Or run directly: linch-mind start"
          EOF
          
          chmod +x package/install.sh
      
      - name: Create DEB package
        run: |
          mkdir -p linch-mind-deb/DEBIAN
          mkdir -p linch-mind-deb/opt
          
          # 复制文件
          cp -r package/linch-mind linch-mind-deb/opt/
          
          # 创建控制文件
          cat > linch-mind-deb/DEBIAN/control << EOF
          Package: linch-mind
          Version: ${{ needs.prepare-packaging.outputs.version }}
          Section: office
          Priority: optional
          Architecture: amd64
          Depends: libc6, libgtk-3-0
          Maintainer: Linch Mind Team <team@linch-mind.com>
          Description: Personal AI Life Assistant
           Linch Mind is a cross-application intelligent connector with proactive 
           recommendation engine and personal data insights platform.
          EOF
          
          # 创建安装后脚本
          cat > linch-mind-deb/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # 创建用户
          if ! id "linch-mind" &>/dev/null; then
              useradd -r -s /bin/false -d /opt/linch-mind linch-mind
          fi
          
          # 设置权限
          chown -R linch-mind:linch-mind /opt/linch-mind
          
          # 创建符号链接
          ln -sf /opt/linch-mind/bin/linch-mind /usr/local/bin/linch-mind
          
          # 注册systemd服务
          if [ -d "/etc/systemd/system" ]; then
              systemctl daemon-reload
              systemctl enable linch-mind.service || true
          fi
          
          echo "Linch Mind installed successfully!"
          EOF
          
          chmod +x linch-mind-deb/DEBIAN/postinst
          
          # 构建DEB包
          dpkg-deb --build linch-mind-deb "${{ needs.prepare-packaging.outputs.package_name }}-linux-amd64.deb"
      
      - name: Create RPM package
        run: |
          mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # 创建tar包
          tar -czf rpmbuild/SOURCES/${{ needs.prepare-packaging.outputs.package_name }}.tar.gz -C package linch-mind
          
          # 创建spec文件
          cat > rpmbuild/SPECS/linch-mind.spec << EOF
          Name:           linch-mind
          Version:        ${{ needs.prepare-packaging.outputs.version }}
          Release:        1%{?dist}
          Summary:        Personal AI Life Assistant
          License:        MIT
          Source0:        %{name}-%{version}.tar.gz
          BuildArch:      x86_64
          Requires:       glibc, gtk3
          
          %description
          Linch Mind is a cross-application intelligent connector with proactive 
          recommendation engine and personal data insights platform.
          
          %prep
          %setup -q
          
          %install
          mkdir -p %{buildroot}/opt
          cp -r * %{buildroot}/opt/linch-mind
          
          %files
          /opt/linch-mind
          
          %post
          if ! id "linch-mind" &>/dev/null; then
              useradd -r -s /bin/false -d /opt/linch-mind linch-mind
          fi
          chown -R linch-mind:linch-mind /opt/linch-mind
          ln -sf /opt/linch-mind/bin/linch-mind /usr/local/bin/linch-mind
          
          %changelog
          * $(date "+%a %b %d %Y") Linch Mind Team <team@linch-mind.com> - ${{ needs.prepare-packaging.outputs.version }}-1
          - Initial package
          EOF
          
          # 构建RPM包
          rpmbuild --define "_topdir $PWD/rpmbuild" -bb rpmbuild/SPECS/linch-mind.spec
          cp rpmbuild/RPMS/x86_64/*.rpm "${{ needs.prepare-packaging.outputs.package_name }}-linux-x86_64.rpm"
      
      - name: Create AppImage
        run: |
          # 下载AppImage工具
          wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          
          # 创建AppDir
          mkdir -p AppDir/usr/{bin,lib,share}
          cp -r package/linch-mind/* AppDir/usr/
          
          # 创建AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export LINCH_MIND_HOME="$HERE/usr"
          export PATH="$HERE/usr/lib/daemon-env/bin:$PATH"
          exec "$HERE/usr/bin/linch-mind" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # 生成AppImage
          ./linuxdeploy --appdir AppDir --output appimage
          mv Linch_Mind*.AppImage "${{ needs.prepare-packaging.outputs.package_name }}-linux-x86_64.AppImage"
      
      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            *.deb
            *.rpm
            *.AppImage
            package/install.sh

  # macOS完整安装包
  build-macos-installer:
    needs: prepare-packaging
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install build tools
        run: |
          brew install cmake nlohmann-json create-dmg
      
      - name: Create app bundle structure
        run: |
          mkdir -p "Linch Mind.app/Contents/"{MacOS,Resources,Frameworks}
          
          # Info.plist
          cat > "Linch Mind.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>Linch Mind</string>
              <key>CFBundleIdentifier</key>
              <string>com.linch-mind.app</string>
              <key>CFBundleVersion</key>
              <string>${{ needs.prepare-packaging.outputs.version }}</string>
              <key>CFBundleExecutable</key>
              <string>linch-mind</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.14</string>
          </dict>
          </plist>
          EOF
      
      - name: Build components
        run: |
          # Build daemon
          cd daemon
          poetry install --no-interaction
          poetry run pip install pyinstaller
          poetry run pyinstaller --onedir --name daemon main.py
          cp -r dist/daemon "../Linch Mind.app/Contents/Frameworks/"
          
          # Build UI
          cd ../ui
          flutter pub get
          flutter config --enable-macos-desktop
          flutter build macos --release
          cp -r build/macos/Build/Products/Release/linch_mind.app/Contents/MacOS/* "../Linch Mind.app/Contents/MacOS/"
          cp -r build/macos/Build/Products/Release/linch_mind.app/Contents/Frameworks/* "../Linch Mind.app/Contents/Frameworks/"
          
          # Build connectors
          cd ../connectors/scripts
          ./build.sh
          mkdir -p "../../Linch Mind.app/Contents/Resources/connectors"
          cp -r ../official/*/bin/release/* "../../Linch Mind.app/Contents/Resources/connectors/"
      
      - name: Download Ollama for macOS
        if: github.event.inputs.include_ollama != 'false'
        run: |
          cd "Linch Mind.app/Contents/Resources"
          wget -O ollama "https://github.com/ollama/ollama/releases/download/v${{ env.OLLAMA_VERSION }}/ollama-darwin"
          chmod +x ollama
      
      - name: Create launcher script
        run: |
          cat > "Linch Mind.app/Contents/MacOS/linch-mind" << 'EOF'
          #!/bin/bash
          
          BUNDLE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
          export LINCH_MIND_HOME="$BUNDLE_DIR"
          
          # Start daemon
          "$BUNDLE_DIR/Frameworks/daemon/daemon" &
          DAEMON_PID=$!
          
          # Start UI
          "$BUNDLE_DIR/MacOS/linch_mind" &
          UI_PID=$!
          
          # Wait for UI to close
          wait $UI_PID
          
          # Kill daemon
          kill $DAEMON_PID 2>/dev/null || true
          EOF
          
          chmod +x "Linch Mind.app/Contents/MacOS/linch-mind"
      
      - name: Create DMG installer
        run: |
          create-dmg \
            --volname "Linch Mind" \
            --background ui/assets/images/dmg-background.png \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Linch Mind.app" 200 190 \
            --hide-extension "Linch Mind.app" \
            --app-drop-link 600 185 \
            "${{ needs.prepare-packaging.outputs.package_name }}-macos-x64.dmg" \
            "Linch Mind.app/"
      
      - name: Upload macOS package
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: "*.dmg"

  # Windows完整安装包
  build-windows-installer:
    needs: prepare-packaging
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install build tools
        run: |
          choco install cmake curl nsis
      
      - name: Create installer directory
        run: |
          mkdir installer
          mkdir installer\linch-mind
      
      - name: Build components
        run: |
          # Build daemon
          cd daemon
          poetry install --no-interaction
          poetry run pip install pyinstaller
          poetry run pyinstaller --onedir --name daemon main.py
          cp -r dist\daemon ..\installer\linch-mind\
          
          # Build UI
          cd ..\ui
          flutter pub get
          flutter config --enable-windows-desktop
          flutter build windows --release
          cp -r build\windows\x64\runner\Release\* ..\installer\linch-mind\
          
          # Build connectors (这里需要适配Windows构建)
          # TODO: 添加Windows连接器构建
      
      - name: Download Ollama for Windows
        if: github.event.inputs.include_ollama != 'false'
        run: |
          cd installer\linch-mind
          curl -L -o ollama.exe "https://github.com/ollama/ollama/releases/download/v${{ env.OLLAMA_VERSION }}/ollama-windows-amd64.exe"
      
      - name: Create NSIS installer script
        run: |
          cat > installer.nsi << 'EOF'
          !define APPNAME "Linch Mind"
          !define VERSION "${{ needs.prepare-packaging.outputs.version }}"
          !define PUBLISHER "Linch Mind Team"
          !define INSTALLSIZE 500000
          
          Name "${APPNAME}"
          OutFile "${{ needs.prepare-packaging.outputs.package_name }}-windows-x64.exe"
          InstallDir "$PROGRAMFILES64\${APPNAME}"
          RequestExecutionLevel admin
          
          Page directory
          Page instfiles
          
          Section "Install"
              SetOutPath $INSTDIR
              File /r "installer\linch-mind\*"
              
              ; Create uninstaller
              WriteUninstaller "$INSTDIR\uninstall.exe"
              
              ; Create shortcuts
              CreateDirectory "$SMPROGRAMS\${APPNAME}"
              CreateShortCut "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk" "$INSTDIR\linch_mind.exe"
              CreateShortCut "$DESKTOP\${APPNAME}.lnk" "$INSTDIR\linch_mind.exe"
              
              ; Registry entries
              WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME}"
              WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayVersion" "${VERSION}"
              WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "Publisher" "${PUBLISHER}"
              WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$INSTDIR\uninstall.exe"
              WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "EstimatedSize" ${INSTALLSIZE}
          SectionEnd
          
          Section "Uninstall"
              Delete "$INSTDIR\*.*"
              RMDir /r "$INSTDIR"
              Delete "$SMPROGRAMS\${APPNAME}\*.*"
              RMDir "$SMPROGRAMS\${APPNAME}"
              Delete "$DESKTOP\${APPNAME}.lnk"
              DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
          SectionEnd
          EOF
      
      - name: Build NSIS installer
        run: |
          & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
      
      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: "*.exe"

  # 创建发布总结
  create-installer-release:
    needs: [prepare-packaging, build-linux-installer, build-macos-installer, build-windows-installer]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all installers
        uses: actions/download-artifact@v4
        with:
          path: installers/
      
      - name: Organize installers
        run: |
          mkdir -p release-installers
          
          # 复制所有安装包
          find installers/ -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.dmg" -o -name "*.exe" -o -name "install.sh" | \
            xargs -I {} cp {} release-installers/
          
          # 生成校验和
          cd release-installers
          sha256sum * > checksums.txt
          
          # 列出所有文件
          ls -lh
      
      - name: Create installation guide
        run: |
          cat > release-installers/INSTALLATION.md << 'EOF'
          # Linch Mind Installation Guide
          
          ## Linux Installation
          
          ### Ubuntu/Debian (.deb)
          ```bash
          sudo dpkg -i linch-mind-*-linux-amd64.deb
          sudo apt-get install -f  # Fix dependencies if needed
          ```
          
          ### RedHat/CentOS (.rpm)
          ```bash
          sudo rpm -i linch-mind-*-linux-x86_64.rpm
          ```
          
          ### Universal Linux (AppImage)
          ```bash
          chmod +x linch-mind-*-linux-x86_64.AppImage
          ./linch-mind-*-linux-x86_64.AppImage
          ```
          
          ### Manual Installation (install.sh)
          ```bash
          tar -xzf linch-mind-*-linux-complete.tar.gz
          cd linch-mind-*
          sudo ./install.sh
          ```
          
          ## macOS Installation
          
          1. Download `linch-mind-*-macos-x64.dmg`
          2. Double-click to mount the disk image
          3. Drag "Linch Mind.app" to Applications folder
          4. Launch from Applications or Spotlight
          
          ## Windows Installation
          
          1. Download `linch-mind-*-windows-x64.exe`
          2. Right-click and "Run as Administrator"
          3. Follow the installation wizard
          4. Launch from Start Menu or Desktop shortcut
          
          ## Post-Installation
          
          1. First launch will initialize the environment
          2. Ollama (if included) will be available automatically
          3. AI models will be downloaded on first use
          4. Check system tray for daemon status
          
          ## System Requirements
          
          - **Linux**: Ubuntu 20.04+, CentOS 8+, or equivalent
          - **macOS**: macOS 10.14+ (Mojave or later)
          - **Windows**: Windows 10+ (64-bit)
          - **RAM**: 4GB minimum, 8GB recommended
          - **Storage**: 2GB for basic installation, 10GB+ with AI models
          
          ## Troubleshooting
          
          - Check daemon status: `linch-mind status`
          - View logs: `~/.linch-mind/logs/`
          - Restart services: `linch-mind restart`
          
          EOF
      
      - name: Create GitHub Release for Installers
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "installers-${{ needs.prepare-packaging.outputs.version }}"
          name: "Linch Mind ${{ needs.prepare-packaging.outputs.version }} - Complete Installers"
          body: |
            🎉 **Complete installation packages for Linch Mind ${{ needs.prepare-packaging.outputs.version }}**
            
            This release includes ready-to-install packages for all supported platforms:
            
            ### 📦 What's Included
            - ✅ **Daemon Service**: Python IPC backend with all dependencies
            - ✅ **Flutter UI**: Cross-platform user interface
            - ✅ **C++ Connectors**: High-performance system integrations
            - ✅ **Ollama**: Local AI inference engine (optional)
            - ✅ **System Integration**: Service scripts, desktop entries, auto-startup
            
            ### 🖥️ Platform Support
            - **Linux**: DEB, RPM, AppImage, Universal installer
            - **macOS**: DMG installer with app bundle
            - **Windows**: NSIS installer with system integration
            
            ### 📋 Installation
            See `INSTALLATION.md` for detailed platform-specific instructions.
            
            ### 🔐 Verification
            All packages include SHA256 checksums in `checksums.txt`.
            
            ---
            
            **Full changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.prepare-packaging.outputs.version }}...installers-${{ needs.prepare-packaging.outputs.version }}
          files: |
            release-installers/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Package Summary
        run: |
          echo "📦 Complete Installer Package Summary"
          echo "===================================="
          echo "Version: ${{ needs.prepare-packaging.outputs.version }}"
          echo ""
          echo "Generated Installers:"
          ls -1 release-installers/ | grep -E '\.(deb|rpm|AppImage|dmg|exe)$' | sed 's/^/  ✅ /'
          echo ""
          echo "🎉 All installer packages created successfully!"
          echo "📥 Download from: https://github.com/${{ github.repository }}/releases/tag/installers-${{ needs.prepare-packaging.outputs.version }}"