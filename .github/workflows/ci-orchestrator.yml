name: 🎼 CI/CD Orchestrator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每日凌晨1点运行完整检查
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      workflow_type:
        description: 'Type of workflow to run'
        required: true
        type: choice
        options:
        - all
        - build-only
        - test-only
        - release-prep
      force_rebuild:
        description: 'Force rebuild all components'
        required: false
        default: false
        type: boolean

jobs:
  # 分析变更和决定构建策略
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build_flutter: ${{ steps.changes.outputs.flutter }}
      should_build_daemon: ${{ steps.changes.outputs.daemon }}
      should_build_connectors: ${{ steps.changes.outputs.connectors }}
      should_run_integration: ${{ steps.changes.outputs.integration }}
      should_create_release: ${{ steps.changes.outputs.release }}
      workflow_type: ${{ steps.workflow.outputs.type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze changed files
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            flutter:
              - 'ui/**'
              - '.github/workflows/flutter-build.yml'
            daemon:
              - 'daemon/**'
              - 'pyproject.toml'
              - '.github/workflows/daemon-build.yml'
            connectors:
              - 'connectors/**'
              - '.github/workflows/connector-build.yml'
            integration:
              - 'ui/**'
              - 'daemon/**'
              - 'connectors/**'
              - '.github/workflows/integration-tests.yml'
            release:
              - '.github/workflows/release.yml'
              - '.github/workflows/package-installer.yml'
              - '.github/config/versions.yml'
      
      - name: Determine workflow type
        id: workflow
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TYPE="${{ github.event.inputs.workflow_type }}"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            TYPE="all"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            TYPE="build-only"
          else
            TYPE="build-only"
          fi
          
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "🎯 Workflow type: $TYPE"
      
      - name: Build strategy summary
        run: |
          echo "📊 Build Strategy Summary"
          echo "========================"
          echo "Flutter UI: ${{ steps.changes.outputs.flutter }}"
          echo "Daemon: ${{ steps.changes.outputs.daemon }}"
          echo "Connectors: ${{ steps.changes.outputs.connectors }}"
          echo "Integration tests: ${{ steps.changes.outputs.integration }}"
          echo "Release: ${{ steps.changes.outputs.release }}"
          echo "Workflow type: ${{ steps.workflow.outputs.type }}"

  # Flutter构建 (条件触发)
  trigger-flutter-build:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_build_flutter == 'true' || github.event.inputs.force_rebuild == 'true' || needs.analyze-changes.outputs.workflow_type == 'all'
    uses: ./.github/workflows/flutter-build.yml
    with:
      platforms: ${{ needs.analyze-changes.outputs.workflow_type == 'all' && 'linux,macos,windows,android,ios,web' || 'linux,macos,windows' }}
      build_mode: ${{ github.ref == 'refs/heads/main' && 'release' || 'debug' }}

  # Daemon构建 (条件触发)
  trigger-daemon-build:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_build_daemon == 'true' || github.event.inputs.force_rebuild == 'true' || needs.analyze-changes.outputs.workflow_type == 'all'
    uses: ./.github/workflows/daemon-build.yml
    with:
      python_version: "3.13"
      build_mode: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  # 连接器构建 (条件触发)
  trigger-connector-build:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_build_connectors == 'true' || github.event.inputs.force_rebuild == 'true' || needs.analyze-changes.outputs.workflow_type == 'all'
    uses: ./.github/workflows/connector-build.yml

  # 集成测试 (条件触发)
  trigger-integration-tests:
    needs: [analyze-changes, trigger-flutter-build, trigger-daemon-build, trigger-connector-build]
    if: |
      always() && 
      (needs.analyze-changes.outputs.should_run_integration == 'true' || 
       needs.analyze-changes.outputs.workflow_type == 'all' ||
       needs.analyze-changes.outputs.workflow_type == 'test-only') &&
      (needs.trigger-flutter-build.result == 'success' || needs.trigger-flutter-build.result == 'skipped') &&
      (needs.trigger-daemon-build.result == 'success' || needs.trigger-daemon-build.result == 'skipped') &&
      (needs.trigger-connector-build.result == 'success' || needs.trigger-connector-build.result == 'skipped')
    uses: ./.github/workflows/integration-tests.yml
    with:
      test_suite: "all"
      environment: ${{ github.ref == 'refs/heads/main' && 'staging' || 'development' }}

  # 安全扫描
  security-scan:
    needs: analyze-changes
    runs-on: ubuntu-latest
    if: needs.analyze-changes.outputs.workflow_type == 'all' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run dependency check
        run: |
          # Python依赖安全检查
          pip install safety
          cd daemon
          safety check || echo "Security issues found in Python dependencies"
          
          # Flutter依赖检查
          cd ../ui
          flutter pub deps | grep -E "vulnerability|security" || echo "No security issues in Flutter dependencies"

  # 性能基准测试
  performance-benchmark:
    needs: [trigger-daemon-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"
      
      - name: Install dependencies
        run: |
          cd daemon
          poetry install --no-interaction
      
      - name: Run performance benchmarks
        run: |
          cd daemon
          poetry run pytest tests/test_architecture_performance.py \
            --benchmark-only \
            --benchmark-json=benchmark-results.json
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: daemon/benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '110%'  # 10% 性能回归阈值

  # 发布准备检查
  release-readiness:
    needs: [trigger-flutter-build, trigger-daemon-build, trigger-connector-build, trigger-integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      ready_for_release: ${{ steps.check.outputs.ready }}
      next_version: ${{ steps.version.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check release readiness
        id: check
        run: |
          READY="true"
          
          # 检查所有构建是否成功
          if [[ "${{ needs.trigger-flutter-build.result }}" == "failure" ||
                "${{ needs.trigger-daemon-build.result }}" == "failure" ||
                "${{ needs.trigger-connector-build.result }}" == "failure" ||
                "${{ needs.trigger-integration-tests.result }}" == "failure" ]]; then
            READY="false"
            echo "❌ Some builds failed"
          fi
          
          # 检查是否有安全问题
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "⚠️  Security scan failed, but allowing release"
            # 不阻塞发布，但记录警告
          fi
          
          echo "ready=$READY" >> $GITHUB_OUTPUT
          echo "🎯 Release readiness: $READY"
      
      - name: Calculate next version
        id: version
        run: |
          # 获取当前最新标签
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_TAG#v}
          
          # 简单的版本递增逻辑 (可以用更复杂的逻辑)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # 递增patch版本
          PATCH=$((PATCH + 1))
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "📈 Next version: $NEXT_VERSION"

  # 自动创建发布PR或标签
  auto-release-trigger:
    needs: [release-readiness]
    runs-on: ubuntu-latest
    if: needs.release-readiness.outputs.ready_for_release == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG="v${{ needs.release-readiness.outputs.next_version }}"
          git tag -a "$TAG" -m "Auto-release $TAG
          
          🤖 Automated release triggered by CI/CD pipeline
          
          Changes included:
          - ✅ All builds passed
          - ✅ Integration tests passed  
          - ✅ Security scan completed
          
          Build artifacts available in CI pipeline."
          
          git push origin "$TAG"
          
          echo "🎉 Created release tag: $TAG"
      
      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.release-readiness.outputs.next_version }}"
          name: "Linch Mind v${{ needs.release-readiness.outputs.next_version }}"
          body: |
            🚀 **Automated Release v${{ needs.release-readiness.outputs.next_version }}**
            
            This release was automatically created by the CI/CD pipeline after all quality checks passed.
            
            ### 📦 What's New
            - See commit history for detailed changes
            
            ### ✅ Quality Assurance
            - All component builds successful
            - Integration tests passed
            - Security scan completed
            - Performance benchmarks within limits
            
            ### 📥 Installation
            Complete installer packages will be available shortly after this release is published.
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.release-readiness.outputs.next_version }}...HEAD
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 通知和总结
  workflow-summary:
    needs: [
      analyze-changes, 
      trigger-flutter-build, 
      trigger-daemon-build, 
      trigger-connector-build, 
      trigger-integration-tests,
      security-scan,
      performance-benchmark,
      release-readiness,
      auto-release-trigger
    ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Summary
        run: |
          echo "🎼 CI/CD Orchestrator Summary"
          echo "============================"
          echo ""
          echo "📊 Component Status:"
          echo "- Flutter Build: ${{ needs.trigger-flutter-build.result }}"
          echo "- Daemon Build: ${{ needs.trigger-daemon-build.result }}"
          echo "- Connector Build: ${{ needs.trigger-connector-build.result }}"
          echo "- Integration Tests: ${{ needs.trigger-integration-tests.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Performance Benchmark: ${{ needs.performance-benchmark.result }}"
          echo ""
          echo "🎯 Release Status:"
          echo "- Release Ready: ${{ needs.release-readiness.outputs.ready_for_release }}"
          echo "- Auto Release: ${{ needs.auto-release-trigger.result }}"
          
          if [[ "${{ needs.auto-release-trigger.result }}" == "success" ]]; then
            echo ""
            echo "🎉 New release created: v${{ needs.release-readiness.outputs.next_version }}"
            echo "📦 Installer packages will be built automatically"
          fi
          
          # 统计失败的作业
          FAILURES=0
          if [[ "${{ needs.trigger-flutter-build.result }}" == "failure" ]]; then
            FAILURES=$((FAILURES + 1))
          fi
          if [[ "${{ needs.trigger-daemon-build.result }}" == "failure" ]]; then
            FAILURES=$((FAILURES + 1))
          fi
          if [[ "${{ needs.trigger-connector-build.result }}" == "failure" ]]; then
            FAILURES=$((FAILURES + 1))
          fi
          if [[ "${{ needs.trigger-integration-tests.result }}" == "failure" ]]; then
            FAILURES=$((FAILURES + 1))
          fi
          
          echo ""
          if [ $FAILURES -eq 0 ]; then
            echo "✅ All critical workflows completed successfully"
          else
            echo "❌ $FAILURES critical workflow(s) failed"
            exit 1
          fi
      
      - name: Send notifications
        if: failure() || success()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ SUCCESS' : '❌ FAILURE';
            const workflow = context.workflow;
            const runId = context.runId;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            
            console.log(`${status}: ${workflow}`);
            console.log(`Run URL: ${runUrl}`);
            
            // 如果配置了Slack webhook，在这里发送通知
            // 如果配置了邮件通知，在这里发送邮件