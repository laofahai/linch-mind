// Mocks generated by Mockito 5.4.6 from annotations
// in linch_mind/test/providers/app_providers_test_fixed.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:linch_mind/models/connector_lifecycle_models.dart' as _i2;
import 'package:linch_mind/services/connector_lifecycle_api_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiscoveryResponse_0 extends _i1.SmartFake
    implements _i2.DiscoveryResponse {
  _FakeDiscoveryResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOperationResponse_1 extends _i1.SmartFake
    implements _i2.OperationResponse {
  _FakeOperationResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectorListResponse_2 extends _i1.SmartFake
    implements _i2.ConnectorListResponse {
  _FakeConnectorListResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectorDetailResponse_3 extends _i1.SmartFake
    implements _i2.ConnectorDetailResponse {
  _FakeConnectorDetailResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectorStatesOverview_4 extends _i1.SmartFake
    implements _i2.ConnectorStatesOverview {
  _FakeConnectorStatesOverview_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectorHealthResponse_5 extends _i1.SmartFake
    implements _i2.ConnectorHealthResponse {
  _FakeConnectorHealthResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectorApiResponse_6 extends _i1.SmartFake
    implements _i2.ConnectorApiResponse {
  _FakeConnectorApiResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectorLifecycleApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectorLifecycleApiClient extends _i1.Mock
    implements _i3.ConnectorLifecycleApiClient {
  MockConnectorLifecycleApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.DiscoveryResponse> discoverConnectors() => (super.noSuchMethod(
        Invocation.method(
          #discoverConnectors,
          [],
        ),
        returnValue:
            _i4.Future<_i2.DiscoveryResponse>.value(_FakeDiscoveryResponse_0(
          this,
          Invocation.method(
            #discoverConnectors,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DiscoveryResponse>);

  @override
  _i4.Future<_i2.OperationResponse> createConnector(
          _i2.CreateConnectorRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConnector,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #createConnector,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.ConnectorListResponse> getConnectors({
    String? connectorId,
    String? state,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnectors,
          [],
          {
            #connectorId: connectorId,
            #state: state,
          },
        ),
        returnValue: _i4.Future<_i2.ConnectorListResponse>.value(
            _FakeConnectorListResponse_2(
          this,
          Invocation.method(
            #getConnectors,
            [],
            {
              #connectorId: connectorId,
              #state: state,
            },
          ),
        )),
      ) as _i4.Future<_i2.ConnectorListResponse>);

  @override
  _i4.Future<_i2.ConnectorDetailResponse> getConnector(String? connectorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnector,
          [connectorId],
        ),
        returnValue: _i4.Future<_i2.ConnectorDetailResponse>.value(
            _FakeConnectorDetailResponse_3(
          this,
          Invocation.method(
            #getConnector,
            [connectorId],
          ),
        )),
      ) as _i4.Future<_i2.ConnectorDetailResponse>);

  @override
  _i4.Future<_i2.OperationResponse> startConnector(String? connectorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #startConnector,
          [connectorId],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #startConnector,
            [connectorId],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.OperationResponse> stopConnector(
    String? connectorId, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopConnector,
          [connectorId],
          {#force: force},
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #stopConnector,
            [connectorId],
            {#force: force},
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.OperationResponse> restartConnector(String? connectorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #restartConnector,
          [connectorId],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #restartConnector,
            [connectorId],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.OperationResponse> updateConnectorConfig(
    String? connectorId,
    _i2.UpdateConfigRequest? request,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConnectorConfig,
          [
            connectorId,
            request,
          ],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #updateConnectorConfig,
            [
              connectorId,
              request,
            ],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.OperationResponse> deleteConnector(
    String? connectorId, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteConnector,
          [connectorId],
          {#force: force},
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #deleteConnector,
            [connectorId],
            {#force: force},
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.ConnectorStatesOverview> getStatesOverview() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStatesOverview,
          [],
        ),
        returnValue: _i4.Future<_i2.ConnectorStatesOverview>.value(
            _FakeConnectorStatesOverview_4(
          this,
          Invocation.method(
            #getStatesOverview,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ConnectorStatesOverview>);

  @override
  _i4.Future<_i2.ConnectorHealthResponse> getHealthCheck() =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthCheck,
          [],
        ),
        returnValue: _i4.Future<_i2.ConnectorHealthResponse>.value(
            _FakeConnectorHealthResponse_5(
          this,
          Invocation.method(
            #getHealthCheck,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ConnectorHealthResponse>);

  @override
  _i4.Future<_i2.ConnectorApiResponse> shutdownAllConnectors() =>
      (super.noSuchMethod(
        Invocation.method(
          #shutdownAllConnectors,
          [],
        ),
        returnValue: _i4.Future<_i2.ConnectorApiResponse>.value(
            _FakeConnectorApiResponse_6(
          this,
          Invocation.method(
            #shutdownAllConnectors,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ConnectorApiResponse>);

  @override
  _i4.Future<_i2.DiscoveryResponse> scanConnectorDirectory(
          String? directoryPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #scanConnectorDirectory,
          [directoryPath],
        ),
        returnValue:
            _i4.Future<_i2.DiscoveryResponse>.value(_FakeDiscoveryResponse_0(
          this,
          Invocation.method(
            #scanConnectorDirectory,
            [directoryPath],
          ),
        )),
      ) as _i4.Future<_i2.DiscoveryResponse>);

  @override
  _i4.Future<_i2.OperationResponse> installConnector(
          _i2.InstallConnectorRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #installConnector,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #installConnector,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Future<_i2.OperationResponse> installFromRegistry(String? connectorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #installFromRegistry,
          [connectorId],
        ),
        returnValue:
            _i4.Future<_i2.OperationResponse>.value(_FakeOperationResponse_1(
          this,
          Invocation.method(
            #installFromRegistry,
            [connectorId],
          ),
        )),
      ) as _i4.Future<_i2.OperationResponse>);

  @override
  _i4.Stream<_i2.ConnectorEvent> watchConnectorEvents() => (super.noSuchMethod(
        Invocation.method(
          #watchConnectorEvents,
          [],
        ),
        returnValue: _i4.Stream<_i2.ConnectorEvent>.empty(),
      ) as _i4.Stream<_i2.ConnectorEvent>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
