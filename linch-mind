#!/bin/bash

# Linch Mind 统一管理脚本
# 用法: 
#   ./linch start       - 启动daemon和UI
#   ./linch daemon      - daemon管理 (start/stop/restart/status/logs)
#   ./linch ui          - 启动UI (可指定平台)
#   ./linch stop        - 停止所有服务
#   ./linch status      - 查看状态

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# 获取项目根目录
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DAEMON_DIR="$PROJECT_ROOT/daemon"
UI_DIR="$PROJECT_ROOT/ui"
PID_FILE="$PROJECT_ROOT/.daemon.pid"

# 显示Logo
show_logo() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════╗"
    echo "║            Linch Mind                ║"
    echo "║     Personal AI Life Assistant      ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
}

# 显示使用方法
show_usage() {
    show_logo
    echo -e "${BLUE}Linch Mind 统一管理脚本${NC}"
    echo ""
    echo "用法: $0 <command> [options]"
    echo ""
    echo "主要命令:"
    echo "  start           - 启动daemon和UI"
    echo "  stop            - 停止所有服务"
    echo "  status          - 查看系统状态"
    echo ""
    echo "Daemon管理:"
    echo "  daemon start    - 启动daemon"
    echo "  daemon stop     - 停止daemon"
    echo "  daemon restart  - 重启daemon"
    echo "  daemon status   - daemon状态"
    echo "  daemon logs     - 查看daemon日志"
    echo ""
    echo "UI管理:"
    echo "  ui [platform]   - 启动UI (默认: macos)"
    echo "                    支持: macos, linux, windows, web, android, ios"
    echo ""
    echo "示例:"
    echo "  $0 start              # 启动完整应用"
    echo "  $0 daemon start       # 只启动daemon"
    echo "  $0 ui web             # 启动Web版UI"
    echo "  $0 stop               # 停止所有服务"
    echo ""
}

# 检查环境
check_environment() {
    # 检查daemon目录
    if [ ! -d "$DAEMON_DIR" ]; then
        echo -e "${RED}❌ 错误：找不到daemon目录${NC}"
        exit 1
    fi

    # 检查Poetry（daemon需要）
    if ! command -v poetry &> /dev/null; then
        echo -e "${RED}❌ 错误：未找到Poetry${NC}"
        echo -e "${YELLOW}   安装：curl -sSL https://install.python-poetry.org | python3 -${NC}"
        exit 1
    fi

    # 检查Flutter（UI需要）
    if [ "$1" = "ui" ] && ! command -v flutter &> /dev/null; then
        echo -e "${RED}❌ 错误：未找到Flutter${NC}"
        echo -e "${YELLOW}   安装：https://flutter.dev/docs/get-started/install${NC}"
        exit 1
    fi
}

# 获取daemon进程ID
get_daemon_pid() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 $PID 2>/dev/null; then
            echo $PID
        else
            rm -f "$PID_FILE"
            echo ""
        fi
    else
        echo ""
    fi
}

# 启动daemon
start_daemon() {
    echo -e "${BLUE}🚀 启动 Daemon...${NC}"
    
    EXISTING_PID=$(get_daemon_pid)
    if [ ! -z "$EXISTING_PID" ]; then
        echo -e "${YELLOW}⚠️  Daemon已运行 (PID: $EXISTING_PID)${NC}"
        return 0
    fi

    cd "$DAEMON_DIR"
    echo -e "${BLUE}📦 检查依赖...${NC}"
    poetry install --only=main --quiet

    echo -e "${GREEN}✅ 启动daemon服务...${NC}"
    nohup poetry run python -m api.main > "$PROJECT_ROOT/.daemon.log" 2>&1 &
    
    DAEMON_PID=$!
    echo $DAEMON_PID > "$PID_FILE"
    
    sleep 3
    if kill -0 $DAEMON_PID 2>/dev/null; then
        echo -e "${GREEN}✅ Daemon启动成功 (PID: $DAEMON_PID)${NC}"
        # 等待IPC socket文件生成
        for i in {1..10}; do
            if [ -f "$HOME/.linch-mind/daemon.socket" ]; then
                echo -e "${BLUE}   IPC: Unix Domain Socket 已就绪${NC}"
                break
            fi
            sleep 1
        done
    else
        echo -e "${RED}❌ Daemon启动失败${NC}"
        rm -f "$PID_FILE"
        exit 1
    fi
}

# 停止daemon
stop_daemon() {
    echo -e "${BLUE}🛑 停止 Daemon...${NC}"
    
    DAEMON_PID=$(get_daemon_pid)
    if [ -z "$DAEMON_PID" ]; then
        echo -e "${YELLOW}⚠️  Daemon未运行${NC}"
        return 0
    fi

    if kill -TERM $DAEMON_PID 2>/dev/null; then
        for i in {1..10}; do
            if ! kill -0 $DAEMON_PID 2>/dev/null; then
                echo -e "${GREEN}✅ Daemon已停止${NC}"
                rm -f "$PID_FILE"
                return 0
            fi
            sleep 1
        done
        kill -KILL $DAEMON_PID 2>/dev/null || true
        echo -e "${GREEN}✅ Daemon已强制停止${NC}"
    fi
    rm -f "$PID_FILE"
}

# daemon状态
daemon_status() {
    DAEMON_PID=$(get_daemon_pid)
    if [ ! -z "$DAEMON_PID" ]; then
        echo -e "${GREEN}✅ Daemon运行中${NC}"
        echo -e "${BLUE}   PID: $DAEMON_PID${NC}"
        
        # 从socket文件检查IPC状态
        if [ -f "$HOME/.linch-mind/daemon.socket" ]; then
            echo -e "${BLUE}   IPC: Unix Domain Socket 可用${NC}"
            echo -e "${GREEN}   通信状态: IPC连接就绪${NC}"
        else
            echo -e "${YELLOW}   IPC信息未找到${NC}"
        fi
    else
        echo -e "${RED}❌ Daemon未运行${NC}"
    fi
}

# 查看daemon日志
daemon_logs() {
    LOG_FILE="$PROJECT_ROOT/.daemon.log"
    if [ -f "$LOG_FILE" ]; then
        echo -e "${BLUE}📋 Daemon日志:${NC}"
        tail -n 50 "$LOG_FILE"
    else
        echo -e "${YELLOW}⚠️  日志文件不存在${NC}"
    fi
}

# 启动UI
start_ui() {
    local platform=${1:-macos}
    
    echo -e "${BLUE}🚀 启动 UI ($platform)...${NC}"
    
    # 检查daemon IPC连接
    if [ -f "$HOME/.linch-mind/daemon.socket" ]; then
        echo -e "${GREEN}   ✅ Daemon IPC连接可用${NC}"
    else
        echo -e "${YELLOW}   ⚠️  Daemon IPC socket未找到${NC}"
        echo -e "${YELLOW}   请先运行: $0 daemon start${NC}"
    fi

    cd "$UI_DIR"
    echo -e "${BLUE}📦 获取Flutter依赖...${NC}"
    flutter pub get

    case $platform in
        macos) flutter run -d macos ;;
        linux) flutter run -d linux ;;
        windows) flutter run -d windows ;;
        web) flutter run -d web-server --web-port 8080 ;;
        android) flutter run -d android ;;
        ios) flutter run -d ios ;;
        *)
            echo -e "${RED}❌ 不支持的平台: $platform${NC}"
            echo -e "${YELLOW}支持: macos, linux, windows, web, android, ios${NC}"
            exit 1 ;;
    esac
}

# 启动完整应用
start_full() {
    show_logo
    echo -e "${BLUE}🚀 启动完整应用...${NC}"
    echo ""
    
    start_daemon
    echo ""
    echo -e "${BLUE}等待daemon完全启动...${NC}"
    sleep 3
    start_ui
}

# 停止所有服务
stop_all() {
    show_logo
    stop_daemon
}

# 显示完整状态
show_full_status() {
    show_logo
    daemon_status
}

# 主程序
main() {
    if [ $# -eq 0 ]; then
        show_usage
        exit 1
    fi

    case $1 in
        start)
            check_environment
            start_full
            ;;
        stop)
            stop_all
            ;;
        status)
            show_full_status
            ;;
        daemon)
            check_environment
            show_logo
            case ${2:-""} in
                start) start_daemon ;;
                stop) stop_daemon ;;
                restart) stop_daemon; sleep 2; start_daemon ;;
                status) daemon_status ;;
                logs) daemon_logs ;;
                *)
                    echo -e "${RED}❌ daemon子命令: start|stop|restart|status|logs${NC}"
                    exit 1 ;;
            esac
            ;;
        ui)
            check_environment ui
            show_logo
            start_ui ${2:-macos}
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            echo -e "${RED}❌ 未知命令: $1${NC}"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"